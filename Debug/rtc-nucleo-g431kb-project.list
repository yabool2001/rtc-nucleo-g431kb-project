
rtc-nucleo-g431kb-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000068  08004e80  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004e80  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2ab  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f7  00000000  00000000  0002f386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  00032438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebbe  00000000  00000000  00032df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f85d  00000000  00000000  000519b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee59  00000000  00000000  0006120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d08  00000000  00000000  00120068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00123d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d38 	.word	0x08004d38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004d38 	.word	0x08004d38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <set_time>:
 * The function also writes a value to a backup register using HAL_RTCEx_BKUPWrite.
 * This could be used for various purposes like checking if the time and date were previously set or not.
 * */
// Define a function named set_time that takes in 7 parameters: Hours, Minutes, Seconds, WeekDay, Month, Date, Year
void set_time (uint8_t Hours, uint8_t Minutes, uint32_t Seconds, uint8_t WeekDay, uint8_t Month, uint8_t Date, uint8_t Year)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	603a      	str	r2, [r7, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	460b      	mov	r3, r1
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	4613      	mov	r3, r2
 80005d0:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef sTime;
  // Declare a RTC_DateTypeDef variable named sDate
  RTC_DateTypeDef sDate;

  // Set the Hours field of sTime to the Hours parameter
  sTime.Hours = Hours;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	733b      	strb	r3, [r7, #12]
  // Set the Minutes field of sTime to the Minutes parameter
  sTime.Minutes = Minutes;
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	737b      	strb	r3, [r7, #13]
  // Set the Seconds field of sTime to the Seconds parameter
  sTime.Seconds = Seconds;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73bb      	strb	r3, [r7, #14]
  // Set the DayLightSaving field of sTime to RTC_DAYLIGHTSAVING_NONE
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  // Set the StoreOperation field of sTime to RTC_STOREOPERATION_RESET
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  // Call HAL_RTC_SetTime with parameters hrtc, &sTime and RTC_FORMAT_BCD. If it returns anything other than HAL_OK, do nothing.
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <set_time+0x74>)
 80005f2:	f001 ffa6 	bl	8002542 <HAL_RTC_SetTime>
  {
  }

  // Set the WeekDay field of sDate to the WeekDay parameter
  sDate.WeekDay = WeekDay;
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	723b      	strb	r3, [r7, #8]
  // Set the Month field of sDate to the Month parameter
  sDate.Month = Month;
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005fe:	727b      	strb	r3, [r7, #9]
  // Set the Date field of sDate to the Date parameter
  sDate.Date = Date;
 8000600:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000604:	72bb      	strb	r3, [r7, #10]
  // Set the Year field of sDate to the Year parameter
  sDate.Year = Year;
 8000606:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800060a:	72fb      	strb	r3, [r7, #11]

  // Call HAL_RTC_SetDate with parameters hrtc, &sDate and RTC_FORMAT_BCD. If it returns anything other than HAL_OK, do nothing.
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <set_time+0x74>)
 8000616:	f002 f88d 	bl	8002734 <HAL_RTC_SetDate>
  {
  }

  // Call HAL_RTCEx_BKUPWrite with parameters hrtc, RTC_BKP_DR1 and dumy value like 0x32F2
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800061a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800061e:	2101      	movs	r1, #1
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <set_time+0x74>)
 8000622:	f002 fb9d 	bl	8002d60 <HAL_RTCEx_BKUPWrite>
}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000084 	.word	0x20000084

08000634 <get_time>:
 * Finally, it prints these strings to the console.
 * This function is useful when you want to display the current time and date in a human-readable format.
 * */
// Define a function named get_time that takes no parameters
void get_time(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af02      	add	r7, sp, #8
 // Allocate space for "DD-MM-YYYY\0"
 char cdate[11];

/* Get the RTC current Time */
 // Call HAL_RTC_GetTime with parameters hrtc, &gTime and RTC_FORMAT_BIN
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	481a      	ldr	r0, [pc, #104]	; (80006ac <get_time+0x78>)
 8000644:	f002 f81a 	bl	800267c <HAL_RTC_GetTime>
/* Get the RTC current Date */
 // Call HAL_RTC_GetDate with parameters hrtc, &gDate and RTC_FORMAT_BIN
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	4816      	ldr	r0, [pc, #88]	; (80006ac <get_time+0x78>)
 8000652:	f002 f8f6 	bl	8002842 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 // Use sprintf to format the time into ctime
 sprintf(ctime,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000656:	7e3b      	ldrb	r3, [r7, #24]
 8000658:	461a      	mov	r2, r3
 800065a:	7e7b      	ldrb	r3, [r7, #25]
 800065c:	4619      	mov	r1, r3
 800065e:	7ebb      	ldrb	r3, [r7, #26]
 8000660:	f107 000c 	add.w	r0, r7, #12
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	460b      	mov	r3, r1
 8000668:	4911      	ldr	r1, [pc, #68]	; (80006b0 <get_time+0x7c>)
 800066a:	f003 fb2b 	bl	8003cc4 <siprintf>
/* Display date Format: dd-mm-yy */
 // Use sprintf to format the date into cdate
 sprintf(cdate,"%02d-%02d-%4d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800066e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000672:	461a      	mov	r2, r3
 8000674:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000678:	4619      	mov	r1, r3
 800067a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800067e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000682:	4638      	mov	r0, r7
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	490a      	ldr	r1, [pc, #40]	; (80006b4 <get_time+0x80>)
 800068a:	f003 fb1b 	bl	8003cc4 <siprintf>

 // Print the time
 printf("%s\r\n", ctime);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <get_time+0x84>)
 8000696:	f003 faa7 	bl	8003be8 <iprintf>
 // Print the date
 printf("%s\r\n", cdate);
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <get_time+0x84>)
 80006a0:	f003 faa2 	bl	8003be8 <iprintf>
}
 80006a4:	bf00      	nop
 80006a6:	3730      	adds	r7, #48	; 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000084 	.word	0x20000084
 80006b0:	08004d50 	.word	0x08004d50
 80006b4:	08004d60 	.word	0x08004d60
 80006b8:	08004d70 	.word	0x08004d70

080006bc <set_alarm>:
 * If this function returns HAL_OK, it means that the alarm was successfully set.
 * This function is useful when you want to set an alarm at a specific time and date.
 * */
// Define a function named set_alarm that takes in 4 parameters: Hours, Minutes, Seconds, Date
void set_alarm (uint8_t Hours, uint8_t Minutes, uint32_t Seconds, uint8_t Date)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	603a      	str	r2, [r7, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	460b      	mov	r3, r1
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	4613      	mov	r3, r2
 80006d0:	717b      	strb	r3, [r7, #5]
  // Declare a RTC_AlarmTypeDef variable named sAlarm
  RTC_AlarmTypeDef sAlarm;

  // Set the Hours field of AlarmTime in sAlarm to the Hours parameter
  sAlarm.AlarmTime.Hours = Hours;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	723b      	strb	r3, [r7, #8]
  // Set the Minutes field of AlarmTime in sAlarm to the Minutes parameter
  sAlarm.AlarmTime.Minutes = Minutes;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	727b      	strb	r3, [r7, #9]
  // Set the Seconds field of AlarmTime in sAlarm to the Seconds parameter
  sAlarm.AlarmTime.Seconds = Seconds;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	72bb      	strb	r3, [r7, #10]
  // Set the SubSeconds field of AlarmTime in sAlarm to 0x00
  sAlarm.AlarmTime.SubSeconds = 0x00;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  // Set the DayLightSaving field of AlarmTime in sAlarm to RTC_DAYLIGHTSAVING_NONE
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  // Set the StoreOperation field of AlarmTime in sAlarm to RTC_STOREOPERATION_RESET
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  // Set the AlarmMask field of sAlarm to RTC_ALARMMASK_NONE
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  // Set the AlarmSubSecondMask field of sAlarm to RTC_ALARMSUBSECONDMASK_ALL
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  // Set the AlarmDateWeekDaySel field of sAlarm to RTC_ALARMDATEWEEKDAYSEL_DATE
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  // Set the AlarmDateWeekDay field of sAlarm to the Date parameter
  sAlarm.AlarmDateWeekDay = Date;
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  // Set the Alarm field of sAlarm to RTC_ALARM_A
  sAlarm.Alarm = RTC_ALARM_A;
 80006fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Call HAL_RTC_SetAlarm_IT with parameters hrtc, &sAlarm and RTC_FORMAT_BCD. If it returns anything other than HAL_OK, do nothing.
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <set_alarm+0x60>)
 800070e:	f002 f8e5 	bl	80028dc <HAL_RTC_SetAlarm_IT>
  {
  }
}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000084 	.word	0x20000084

08000720 <HAL_RTC_AlarmAEventCallback>:
 * When an Alarm A interrupt occurs, this function is automatically called, and it prints “Alarm Interrupt Occurred” to the console.
 * This function is useful for providing a notification or performing a specific action when an alarm goes off.
 */
// Define a function named HAL_RTC_AlarmAEventCallback that takes in a pointer to a RTC_HandleTypeDef variable named hrtc
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  // Print "Alarm Interrupt Occurred" to the console
  printf("Alarm Interrupt Occurred\r\n");
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <HAL_RTC_AlarmAEventCallback+0x18>)
 800072a:	f003 fac3 	bl	8003cb4 <puts>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08004d78 	.word	0x08004d78

0800073c <__io_putchar>:
 * After transmitting the character, the function returns the same character.
 * This function is typically used for low-level operations such as implementing printf functionality over UART.
 * */
// Define the function __io_putchar
int __io_putchar(int ch)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    // Call HAL_UART_Transmit with parameters &huart2, (uint8_t *)&ch, 1, and 0xffff
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xffff);
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074a:	2201      	movs	r2, #1
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <__io_putchar+0x20>)
 800074e:	f002 fb6f 	bl	8002e30 <HAL_UART_Transmit>
    return ch; // Return the character that was transmitted
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000ac 	.word	0x200000ac

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fb72 	bl	8000e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f81f 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f949 	bl	8000a04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000772:	f000 f8fb 	bl	800096c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000776:	f000 f867 	bl	8000848 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Set the time to 23:59:30 and the date to 2023-09-14 (Thursday)
  set_time(0x23, 0x59, 0x30, 0x04, 0x09, 0x14, 0x23);
 800077a:	2323      	movs	r3, #35	; 0x23
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2314      	movs	r3, #20
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2309      	movs	r3, #9
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2304      	movs	r3, #4
 8000788:	2230      	movs	r2, #48	; 0x30
 800078a:	2159      	movs	r1, #89	; 0x59
 800078c:	2023      	movs	r0, #35	; 0x23
 800078e:	f7ff ff15 	bl	80005bc <set_time>
  // Set an alarm for 00:00:05 on the 15th of the month
  set_alarm (0x00, 0x00, 0x05, 0x15);
 8000792:	2315      	movs	r3, #21
 8000794:	2205      	movs	r2, #5
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff8f 	bl	80006bc <set_alarm>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Call the get_time function to get the current time and date from the Real-Time Clock (RTC)
	  get_time();
 800079e:	f7ff ff49 	bl	8000634 <get_time>
	  // Delay the program execution for 1000 milliseconds (1 second)
	  HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f000 fbc3 	bl	8000f30 <HAL_Delay>
	  get_time();
 80007aa:	e7f8      	b.n	800079e <main+0x3e>

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2238      	movs	r2, #56	; 0x38
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fb7a 	bl	8003eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fe7a 	bl	80014c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007d4:	230a      	movs	r3, #10
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	; 0x55
 80007f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ff02 	bl	8001610 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000812:	f000 f943 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fa06 	bl	8001c40 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800083a:	f000 f92f 	bl	8000a9c <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b090      	sub	sp, #64	; 0x40
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2228      	movs	r2, #40	; 0x28
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fb23 	bl	8003eb4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <MX_RTC_Init+0x11c>)
 8000870:	4a3d      	ldr	r2, [pc, #244]	; (8000968 <MX_RTC_Init+0x120>)
 8000872:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_RTC_Init+0x11c>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800087a:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <MX_RTC_Init+0x11c>)
 800087c:	227f      	movs	r2, #127	; 0x7f
 800087e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_RTC_Init+0x11c>)
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <MX_RTC_Init+0x11c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800088c:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_RTC_Init+0x11c>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <MX_RTC_Init+0x11c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_RTC_Init+0x11c>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_RTC_Init+0x11c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a6:	482f      	ldr	r0, [pc, #188]	; (8000964 <MX_RTC_Init+0x11c>)
 80008a8:	f001 fdd6 	bl	8002458 <HAL_RTC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f8f3 	bl	8000a9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 80008b6:	2323      	movs	r3, #35	; 0x23
 80008b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x26;
 80008bc:	2326      	movs	r3, #38	; 0x26
 80008be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x20;
 80008c2:	2320      	movs	r3, #32
 80008c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	4821      	ldr	r0, [pc, #132]	; (8000964 <MX_RTC_Init+0x11c>)
 80008de:	f001 fe30 	bl	8002542 <HAL_RTC_SetTime>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80008e8:	f000 f8d8 	bl	8000a9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80008ec:	2304      	movs	r3, #4
 80008ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80008f2:	2309      	movs	r3, #9
 80008f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x14;
 80008f8:	2314      	movs	r3, #20
 80008fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 80008fe:	2323      	movs	r3, #35	; 0x23
 8000900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000908:	2201      	movs	r2, #1
 800090a:	4619      	mov	r1, r3
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_RTC_Init+0x11c>)
 800090e:	f001 ff11 	bl	8002734 <HAL_RTC_SetDate>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8000918:	f000 f8c0 	bl	8000a9c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x23;
 800091c:	2323      	movs	r3, #35	; 0x23
 800091e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x30;
 8000920:	2330      	movs	r3, #48	; 0x30
 8000922:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000924:	2330      	movs	r3, #48	; 0x30
 8000926:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_RTC_Init+0x11c>)
 800094c:	f001 ffc6 	bl	80028dc <HAL_RTC_SetAlarm_IT>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000956:	f000 f8a1 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3740      	adds	r7, #64	; 0x40
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000084 	.word	0x20000084
 8000968:	40002800 	.word	0x40002800

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART2_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART2_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART2_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009b6:	f002 f9eb 	bl	8002d90 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f86c 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009c8:	f002 ff82 	bl	80038d0 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f863 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009da:	f002 ffb7 	bl	800394c <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f85a 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009ea:	f002 ff38 	bl	800385e <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f852 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0x94>)
 8000a6a:	f000 fd15 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0x94>)
 8000a88:	f000 fb84 	bl	8001194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000400 	.word	0x48000400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2244      	movs	r2, #68	; 0x44
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f9d7 	bl	8003eb4 <memset>
  if(hrtc->Instance==RTC)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_RTC_MspInit+0x80>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d12b      	bne.n	8000b68 <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 faa9 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b2c:	f7ff ffb6 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_RTC_MspInit+0x84>)
 8000b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_RTC_MspInit+0x84>)
 8000b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_RTC_MspInit+0x84>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_RTC_MspInit+0x84>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_RTC_MspInit+0x84>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2029      	movs	r0, #41	; 0x29
 8000b5e:	f000 fae4 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b62:	2029      	movs	r0, #41	; 0x29
 8000b64:	f000 fafb 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3750      	adds	r7, #80	; 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40002800 	.word	0x40002800
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09a      	sub	sp, #104	; 0x68
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2244      	movs	r2, #68	; 0x44
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f98b 	bl	8003eb4 <memset>
  if(huart->Instance==USART2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_UART_MspInit+0xa8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d136      	bne.n	8000c16 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fa5f 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc0:	f7ff ff6c 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_MspInit+0xac>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c04:	2307      	movs	r3, #7
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f000 fabf 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3768      	adds	r7, #104	; 0x68
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40021000 	.word	0x40021000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f93e 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <RTC_Alarm_IRQHandler+0x10>)
 8000c82:	f001 ff55 	bl	8002b30 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000084 	.word	0x20000084

08000c90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd29 	bl	800073c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
  }
  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f003 f8d8 	bl	8003f50 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20008000 	.word	0x20008000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	2000013c 	.word	0x2000013c
 8000dd4:	20000290 	.word	0x20000290

08000dd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f003 f897 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fc97 	bl	8000760 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e40:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8000e44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e48:	20000290 	.word	0x20000290

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>

08000e4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f95b 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f80e 	bl	8000e80 <HAL_InitTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	e001      	b.n	8000e74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e70:	f7ff fe1a 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e74:	79fb      	ldrb	r3, [r7, #7]

}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_InitTick+0x68>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d022      	beq.n	8000eda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_InitTick+0x6c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_InitTick+0x68>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f966 	bl	800117a <HAL_SYSTICK_Config>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10f      	bne.n	8000ed4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d809      	bhi.n	8000ece <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec2:	f000 f932 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_InitTick+0x70>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e004      	b.n	8000ede <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_IncTick+0x1c>)
 8000f04:	6013      	str	r3, [r2, #0]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000140 	.word	0x20000140
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000140 	.word	0x20000140

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d004      	beq.n	8000f54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_Delay+0x40>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f54:	bf00      	nop
 8000f56:	f7ff ffdf 	bl	8000f18 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d8f7      	bhi.n	8000f56 <HAL_Delay+0x26>
  {
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff40 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa4 	bl	80010d0 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011a2:	e15a      	b.n	800145a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 814c 	beq.w	8001454 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 0201 	and.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	6939      	ldr	r1, [r7, #16]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80a6 	beq.w	8001454 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6613      	str	r3, [r2, #96]	; 0x60
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 8001316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001320:	4a56      	ldr	r2, [pc, #344]	; (800147c <HAL_GPIO_Init+0x2e8>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134a:	d01f      	beq.n	800138c <HAL_GPIO_Init+0x1f8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x2ec>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d019      	beq.n	8001388 <HAL_GPIO_Init+0x1f4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d013      	beq.n	8001384 <HAL_GPIO_Init+0x1f0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_GPIO_Init+0x2f4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1ec>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x2f8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2fc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1e4>
 8001374:	2305      	movs	r3, #5
 8001376:	e00a      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 8001378:	2306      	movs	r3, #6
 800137a:	e008      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 800137c:	2304      	movs	r3, #4
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 8001380:	2303      	movs	r3, #3
 8001382:	e004      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 8001384:	2302      	movs	r3, #2
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_GPIO_Init+0x1fa>
 800138c:	2300      	movs	r3, #0
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	f002 0203 	and.w	r2, r2, #3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4093      	lsls	r3, r2
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139e:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_GPIO_Init+0x2e8>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x300>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_GPIO_Init+0x300>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_GPIO_Init+0x300>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f ae9d 	bne.w	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	48001000 	.word	0x48001000
 8001490:	48001400 	.word	0x48001400
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d141      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d131      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ea:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2232      	movs	r2, #50	; 0x32
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a3f      	ldr	r2, [pc, #252]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	e002      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d102      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d158      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e057      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001558:	e04d      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d141      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156e:	d131      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2232      	movs	r2, #50	; 0x32
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a6:	e002      	b.n	80015ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d102      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f2      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d112      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e011      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015e4:	e007      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40007000 	.word	0x40007000
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e306      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d075      	beq.n	800171a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001638:	4b94      	ldr	r3, [pc, #592]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x3e>
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d002      	beq.n	8001654 <HAL_RCC_OscConfig+0x44>
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b8d      	ldr	r3, [pc, #564]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d05b      	beq.n	8001718 <HAL_RCC_OscConfig+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d157      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2e1      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x74>
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a84      	ldr	r2, [pc, #528]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7c      	ldr	r3, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7b      	ldr	r2, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a77      	ldr	r2, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a74      	ldr	r2, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fc26 	bl	8000f18 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fc22 	bl	8000f18 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e2a6      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xc0>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc12 	bl	8000f18 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fc0e 	bl	8000f18 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e292      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xe8>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x136>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x13c>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d11f      	bne.n	800178c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b4f      	ldr	r3, [pc, #316]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x154>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e265      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4946      	ldr	r1, [pc, #280]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_RCC_OscConfig+0x280>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb7f 	bl	8000e80 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d043      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e251      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3c      	ldr	r2, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fbba 	bl	8000f18 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fbb6 	bl	8000f18 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e23a      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	492d      	ldr	r1, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e01a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb96 	bl	8000f18 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb92 	bl	8000f18 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e216      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e0>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d041      	beq.n	80018a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01c      	beq.n	8001860 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fb6f 	bl	8000f18 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fb6b 	bl	8000f18 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1ef      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ef      	beq.n	800183e <HAL_RCC_OscConfig+0x22e>
 800185e:	e020      	b.n	80018a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fb52 	bl	8000f18 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001876:	e00d      	b.n	8001894 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fb4e 	bl	8000f18 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d906      	bls.n	8001894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1d2      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001894:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ea      	bne.n	8001878 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80a6 	beq.w	80019fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b4:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2b4>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x2b6>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b79      	ldr	r3, [pc, #484]	; (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	; (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fb0b 	bl	8000f18 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fb07 	bl	8000f18 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e18b      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b6c      	ldr	r3, [pc, #432]	; (8001acc <HAL_RCC_OscConfig+0x4bc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x32e>
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	e024      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x358>
 8001946:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194c:	4a5e      	ldr	r2, [pc, #376]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	4a5a      	ldr	r2, [pc, #360]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 8001968:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d016      	beq.n	80019be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff fac2 	bl	8000f18 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7ff fabe 	bl	8000f18 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e140      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ed      	beq.n	8001998 <HAL_RCC_OscConfig+0x388>
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff faab 	bl	8000f18 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff faa7 	bl	8000f18 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e129      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ed      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a16:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa7a 	bl	8000f18 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a28:	f7ff fa76 	bl	8000f18 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0fa      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCC_OscConfig+0x418>
 8001a48:	e01b      	b.n	8001a82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a50:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa5d 	bl	8000f18 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7ff fa59 	bl	8000f18 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0dd      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80d1 	beq.w	8001c2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f000 808b 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d15e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fa33 	bl	8000f18 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fa2f 	bl	8000f18 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d905      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0b3      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ec      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <HAL_RCC_OscConfig+0x62c>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6a11      	ldr	r1, [r2, #32]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0552      	lsls	r2, r2, #21
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0a:	0852      	lsrs	r2, r2, #1
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	0652      	lsls	r2, r2, #25
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b16:	06d2      	lsls	r2, r2, #27
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4947      	ldr	r1, [pc, #284]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a41      	ldr	r2, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f9ee 	bl	8000f18 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f9ea 	bl	8000f18 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e06e      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x530>
 8001b5e:	e066      	b.n	8001c2e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001b7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f9c6 	bl	8000f18 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f9c2 	bl	8000f18 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e046      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x580>
 8001bae:	e03e      	b.n	8001c2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e039      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_OscConfig+0x628>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d12c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d123      	bne.n	8001c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d113      	bne.n	8001c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	019f800c 	.word	0x019f800c

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e11e      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 020f 	bic.w	r2, r3, #15
 8001c6e:	498c      	ldr	r1, [pc, #560]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b8a      	ldr	r3, [pc, #552]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e106      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d073      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d129      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0f4      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cac:	f000 f99e 	bl	8001fec <RCC_GetSysClockFreqFromPLLSource>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a7c      	ldr	r2, [pc, #496]	; (8001ea8 <HAL_RCC_ClockConfig+0x268>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d93f      	bls.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cba:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d033      	beq.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d12f      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce2:	4a70      	ldr	r2, [pc, #448]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e024      	b.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0c6      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0be      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d18:	f000 f8ce 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_RCC_ClockConfig+0x268>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d909      	bls.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4957      	ldr	r1, [pc, #348]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f8e4 	bl	8000f18 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7ff f8e0 	bl	8000f18 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e095      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 020c 	and.w	r2, r3, #12
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1eb      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d023      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a42      	ldr	r2, [pc, #264]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001db4:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4936      	ldr	r1, [pc, #216]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d21d      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 020f 	bic.w	r2, r3, #15
 8001df8:	4929      	ldr	r1, [pc, #164]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f88a 	bl	8000f18 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f886 	bl	8000f18 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e03b      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1ed      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4917      	ldr	r1, [pc, #92]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490f      	ldr	r1, [pc, #60]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6a:	f000 f825 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	490c      	ldr	r1, [pc, #48]	; (8001eac <HAL_RCC_ClockConfig+0x26c>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x270>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fff6 	bl	8000e80 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	04c4b400 	.word	0x04c4b400
 8001eac:	08004d94 	.word	0x08004d94
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e047      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e03e      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d136      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3301      	adds	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	68d2      	ldr	r2, [r2, #12]
 8001f18:	0a12      	lsrs	r2, r2, #8
 8001f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
      break;
 8001f24:	e00c      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	0a12      	lsrs	r2, r2, #8
 8001f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
      break;
 8001f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	e001      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f60:	693b      	ldr	r3, [r7, #16]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f98:	f7ff fff0 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4904      	ldr	r1, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08004da4 	.word	0x08004da4

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc4:	f7ff ffda 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08004da4 	.word	0x08004da4

08001fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3301      	adds	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d10c      	bne.n	800202a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	0a12      	lsrs	r2, r2, #8
 800201e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
    break;
 8002028:	e00c      	b.n	8002044 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002034:	68d2      	ldr	r2, [r2, #12]
 8002036:	0a12      	lsrs	r2, r2, #8
 8002038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    break;
 8002042:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0e5b      	lsrs	r3, r3, #25
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	00f42400 	.word	0x00f42400

08002078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002080:	2300      	movs	r3, #0
 8002082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002084:	2300      	movs	r3, #0
 8002086:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8098 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ce:	f7fe ff23 	bl	8000f18 <HAL_GetTick>
 80020d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d4:	e009      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe ff1f 	bl	8000f18 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	74fb      	strb	r3, [r7, #19]
        break;
 80020e8:	e005      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ef      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d159      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01e      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	d019      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fedf 	bl	8000f18 <HAL_GetTick>
 800215a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215c:	e00b      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fedb 	bl	8000f18 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d902      	bls.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	74fb      	strb	r3, [r7, #19]
            break;
 8002174:	e006      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ec      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10b      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021a0:	e008      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	74bb      	strb	r3, [r7, #18]
 80021a6:	e005      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4ba6      	ldr	r3, [pc, #664]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4aa5      	ldr	r2, [pc, #660]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f023 0203 	bic.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	499c      	ldr	r1, [pc, #624]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f4:	4b97      	ldr	r3, [pc, #604]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 020c 	bic.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4994      	ldr	r1, [pc, #592]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002216:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	498b      	ldr	r1, [pc, #556]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002238:	4b86      	ldr	r3, [pc, #536]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4983      	ldr	r1, [pc, #524]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800225a:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	497a      	ldr	r1, [pc, #488]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4972      	ldr	r1, [pc, #456]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4969      	ldr	r1, [pc, #420]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4961      	ldr	r1, [pc, #388]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	4958      	ldr	r1, [pc, #352]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	4950      	ldr	r1, [pc, #320]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002322:	d105      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800233c:	4b45      	ldr	r3, [pc, #276]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	4942      	ldr	r1, [pc, #264]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235a:	d105      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002374:	4b37      	ldr	r3, [pc, #220]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002392:	d105      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	4926      	ldr	r1, [pc, #152]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ca:	d105      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002402:	d105      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002448:	7cbb      	ldrb	r3, [r7, #18]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d066      	beq.n	8002538 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fb36 	bl	8000af0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	22ca      	movs	r2, #202	; 0xca
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2253      	movs	r2, #83	; 0x53
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fb9f 	bl	8002be0 <RTC_EnterInitMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d13a      	bne.n	8002522 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80024ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024be:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6999      	ldr	r1, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	041a      	lsls	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fbab 	bl	8002c4c <RTC_ExitInitMode>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d110      	bne.n	8002522 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002542:	b590      	push	{r4, r7, lr}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RTC_SetTime+0x1a>
 8002558:	2302      	movs	r3, #2
 800255a:	e08b      	b.n	8002674 <HAL_RTC_SetTime+0x132>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	22ca      	movs	r2, #202	; 0xca
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2253      	movs	r2, #83	; 0x53
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fb2f 	bl	8002be0 <RTC_EnterInitMode>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d163      	bne.n	8002654 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fb91 	bl	8002cd2 <RTC_ByteToBcd2>
 80025b0:	4603      	mov	r3, r0
 80025b2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fb8a 	bl	8002cd2 <RTC_ByteToBcd2>
 80025be:	4603      	mov	r3, r0
 80025c0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025c2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	789b      	ldrb	r3, [r3, #2]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fb82 	bl	8002cd2 <RTC_ByteToBcd2>
 80025ce:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025d0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e018      	b.n	8002612 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002600:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002606:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	78db      	ldrb	r3, [r3, #3]
 800260c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800261c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002620:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002630:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6999      	ldr	r1, [r3, #24]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fafe 	bl	8002c4c <RTC_ExitInitMode>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002672:	7cfb      	ldrb	r3, [r7, #19]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80026aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	0d9b      	lsrs	r3, r3, #22
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11a      	bne.n	800272a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fb0a 	bl	8002d12 <RTC_Bcd2ToByte>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb01 	bl	8002d12 <RTC_Bcd2ToByte>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 faf8 	bl	8002d12 <RTC_Bcd2ToByte>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_RTC_SetDate+0x1a>
 800274a:	2302      	movs	r3, #2
 800274c:	e075      	b.n	800283a <HAL_RTC_SetDate+0x106>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10e      	bne.n	8002782 <HAL_RTC_SetDate+0x4e>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	785b      	ldrb	r3, [r3, #1]
 8002774:	f023 0310 	bic.w	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	330a      	adds	r3, #10
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11c      	bne.n	80027c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 faa0 	bl	8002cd2 <RTC_ByteToBcd2>
 8002792:	4603      	mov	r3, r0
 8002794:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fa99 	bl	8002cd2 <RTC_ByteToBcd2>
 80027a0:	4603      	mov	r3, r0
 80027a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80027a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	789b      	ldrb	r3, [r3, #2]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fa91 	bl	8002cd2 <RTC_ByteToBcd2>
 80027b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80027b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00e      	b.n	80027e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	78db      	ldrb	r3, [r3, #3]
 80027c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80027d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	22ca      	movs	r2, #202	; 0xca
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2253      	movs	r2, #83	; 0x53
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f9f5 	bl	8002be0 <RTC_EnterInitMode>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800280a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800280e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fa1b 	bl	8002c4c <RTC_ExitInitMode>
 8002816:	4603      	mov	r3, r0
 8002818:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
}
 800283a:	4618      	mov	r0, r3
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}

08002842 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002858:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800285c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	0b5b      	lsrs	r3, r3, #13
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11a      	bne.n	80028d2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	78db      	ldrb	r3, [r3, #3]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fa36 	bl	8002d12 <RTC_Bcd2ToByte>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa2d 	bl	8002d12 <RTC_Bcd2ToByte>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	789b      	ldrb	r3, [r3, #2]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa24 	bl	8002d12 <RTC_Bcd2ToByte>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_RTC_SetAlarm_IT+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e115      	b.n	8002b22 <HAL_RTC_SetAlarm_IT+0x246>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2202      	movs	r2, #2
 8002902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d137      	bne.n	800297c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f9d4 	bl	8002cd2 <RTC_ByteToBcd2>
 800292a:	4603      	mov	r3, r0
 800292c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f9cd 	bl	8002cd2 <RTC_ByteToBcd2>
 8002938:	4603      	mov	r3, r0
 800293a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800293c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	789b      	ldrb	r3, [r3, #2]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f9c5 	bl	8002cd2 <RTC_ByteToBcd2>
 8002948:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800294a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002954:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f9b7 	bl	8002cd2 <RTC_ByteToBcd2>
 8002964:	4603      	mov	r3, r0
 8002966:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002968:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002970:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002976:	4313      	orrs	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e023      	b.n	80029c4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else /* Format BCD */
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800299c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80029aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80029b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80029ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	22ca      	movs	r2, #202	; 0xca
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2253      	movs	r2, #83	; 0x53
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d141      	bne.n	8002a6e <HAL_RTC_SetAlarm_IT+0x192>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80029f8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a08:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 8002a0a:	f7fe fa85 	bl	8000f18 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8002a10:	e015      	b.n	8002a3e <HAL_RTC_SetAlarm_IT+0x162>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a12:	f7fe fa81 	bl	8000f18 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a20:	d90d      	bls.n	8002a3e <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e071      	b.n	8002b22 <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0e2      	beq.n	8002a12 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMAR, tmpreg);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMASSR, subsecondtmpreg);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8002a6a:	619a      	str	r2, [r3, #24]
 8002a6c:	e040      	b.n	8002af0 <HAL_RTC_SetAlarm_IT+0x214>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8002a7c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 8002a86:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8c:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 8002a8e:	f7fe fa43 	bl	8000f18 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 8002a94:	e015      	b.n	8002ac2 <HAL_RTC_SetAlarm_IT+0x1e6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a96:	f7fe fa3f 	bl	8000f18 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa4:	d90d      	bls.n	8002ac2 <HAL_RTC_SetAlarm_IT+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e02f      	b.n	8002b22 <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0e2      	beq.n	8002a96 <HAL_RTC_SetAlarm_IT+0x1ba>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMBR, tmpreg);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMBSSR, subsecondtmpreg);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8002aee:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_RISING_IT();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x250>)
 8002b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b06:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(hrtc->Instance->MISR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RTC_AlarmIRQHandler+0x60>)
 8002b54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b58:	615a      	str	r2, [r3, #20]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd fde0 	bl	8000720 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RTC_AlarmIRQHandler+0x50>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RTC_AlarmIRQHandler+0x60>)
 8002b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b78:	615a      	str	r2, [r3, #20]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8e5 	bl	8002d4a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0220 	bic.w	r2, r2, #32
 8002baa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bac:	f7fe f9b4 	bl	8000f18 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002bb2:	e009      	b.n	8002bc8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bb4:	f7fe f9b0 	bl	8000f18 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e007      	b.n	8002bd8 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d123      	bne.n	8002c42 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c0a:	f7fe f985 	bl	8000f18 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c10:	e00d      	b.n	8002c2e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c12:	f7fe f981 	bl	8000f18 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c20:	d905      	bls.n	8002c2e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <RTC_EnterInitMode+0x62>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d1e7      	bne.n	8002c12 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c66:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff8c 	bl	8002b94 <HAL_RTC_WaitForSynchro>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d022      	beq.n	8002cc8 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2203      	movs	r2, #3
 8002c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e01b      	b.n	8002cc8 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0220 	bic.w	r2, r2, #32
 8002c9e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff77 	bl	8002b94 <HAL_RTC_WaitForSynchro>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8002ce4:	e005      	b.n	8002cf2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	3b0a      	subs	r3, #10
 8002cf0:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d8f6      	bhi.n	8002ce6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2db      	uxtb	r3, r3
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RTCEx_BKUPWrite+0x2c>)
 8002d6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40002500 	.word	0x40002500

08002d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e042      	b.n	8002e28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fd fedf 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2224      	movs	r2, #36	; 0x24
 8002dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8c2 	bl	8002f5c <UART_SetConfig>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e022      	b.n	8002e28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb82 	bl	80034f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fc09 	bl	8003638 <UART_CheckIdleState>
 8002e26:	4603      	mov	r3, r0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 8083 	bne.w	8002f52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Transmit+0x28>
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e07b      	b.n	8002f54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x3a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e074      	b.n	8002f54 <HAL_UART_Transmit+0x124>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	; 0x21
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e82:	f7fe f849 	bl	8000f18 <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Transmit+0x84>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002ec4:	e02c      	b.n	8002f20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fbfc 	bl	80036ce <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e039      	b.n	8002f54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e007      	b.n	8002f0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1cc      	bne.n	8002ec6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fbc9 	bl	80036ce <UART_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e006      	b.n	8002f54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b08c      	sub	sp, #48	; 0x30
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4bab      	ldr	r3, [pc, #684]	; (8003238 <UART_SetConfig+0x2dc>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4aa0      	ldr	r2, [pc, #640]	; (800323c <UART_SetConfig+0x2e0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f023 010f 	bic.w	r1, r3, #15
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a91      	ldr	r2, [pc, #580]	; (8003240 <UART_SetConfig+0x2e4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d125      	bne.n	800304c <UART_SetConfig+0xf0>
 8003000:	4b90      	ldr	r3, [pc, #576]	; (8003244 <UART_SetConfig+0x2e8>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b03      	cmp	r3, #3
 800300c:	d81a      	bhi.n	8003044 <UART_SetConfig+0xe8>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <UART_SetConfig+0xb8>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	08003035 	.word	0x08003035
 800301c:	0800302d 	.word	0x0800302d
 8003020:	0800303d 	.word	0x0800303d
 8003024:	2301      	movs	r3, #1
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302a:	e0d6      	b.n	80031da <UART_SetConfig+0x27e>
 800302c:	2302      	movs	r3, #2
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e0d2      	b.n	80031da <UART_SetConfig+0x27e>
 8003034:	2304      	movs	r3, #4
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303a:	e0ce      	b.n	80031da <UART_SetConfig+0x27e>
 800303c:	2308      	movs	r3, #8
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003042:	e0ca      	b.n	80031da <UART_SetConfig+0x27e>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304a:	e0c6      	b.n	80031da <UART_SetConfig+0x27e>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7d      	ldr	r2, [pc, #500]	; (8003248 <UART_SetConfig+0x2ec>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d138      	bne.n	80030c8 <UART_SetConfig+0x16c>
 8003056:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <UART_SetConfig+0x2e8>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d82d      	bhi.n	80030c0 <UART_SetConfig+0x164>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0x110>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030c1 	.word	0x080030c1
 8003074:	080030c1 	.word	0x080030c1
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c1 	.word	0x080030c1
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a6:	e098      	b.n	80031da <UART_SetConfig+0x27e>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ae:	e094      	b.n	80031da <UART_SetConfig+0x27e>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b6:	e090      	b.n	80031da <UART_SetConfig+0x27e>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030be:	e08c      	b.n	80031da <UART_SetConfig+0x27e>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c6:	e088      	b.n	80031da <UART_SetConfig+0x27e>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5f      	ldr	r2, [pc, #380]	; (800324c <UART_SetConfig+0x2f0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d125      	bne.n	800311e <UART_SetConfig+0x1c2>
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <UART_SetConfig+0x2e8>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d016      	beq.n	800310e <UART_SetConfig+0x1b2>
 80030e0:	2b30      	cmp	r3, #48	; 0x30
 80030e2:	d818      	bhi.n	8003116 <UART_SetConfig+0x1ba>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d00a      	beq.n	80030fe <UART_SetConfig+0x1a2>
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d814      	bhi.n	8003116 <UART_SetConfig+0x1ba>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <UART_SetConfig+0x19a>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d008      	beq.n	8003106 <UART_SetConfig+0x1aa>
 80030f4:	e00f      	b.n	8003116 <UART_SetConfig+0x1ba>
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fc:	e06d      	b.n	80031da <UART_SetConfig+0x27e>
 80030fe:	2302      	movs	r3, #2
 8003100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003104:	e069      	b.n	80031da <UART_SetConfig+0x27e>
 8003106:	2304      	movs	r3, #4
 8003108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310c:	e065      	b.n	80031da <UART_SetConfig+0x27e>
 800310e:	2308      	movs	r3, #8
 8003110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003114:	e061      	b.n	80031da <UART_SetConfig+0x27e>
 8003116:	2310      	movs	r3, #16
 8003118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800311c:	e05d      	b.n	80031da <UART_SetConfig+0x27e>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <UART_SetConfig+0x2f4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d125      	bne.n	8003174 <UART_SetConfig+0x218>
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <UART_SetConfig+0x2e8>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003132:	2bc0      	cmp	r3, #192	; 0xc0
 8003134:	d016      	beq.n	8003164 <UART_SetConfig+0x208>
 8003136:	2bc0      	cmp	r3, #192	; 0xc0
 8003138:	d818      	bhi.n	800316c <UART_SetConfig+0x210>
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d00a      	beq.n	8003154 <UART_SetConfig+0x1f8>
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d814      	bhi.n	800316c <UART_SetConfig+0x210>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x1f0>
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d008      	beq.n	800315c <UART_SetConfig+0x200>
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x210>
 800314c:	2300      	movs	r3, #0
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003152:	e042      	b.n	80031da <UART_SetConfig+0x27e>
 8003154:	2302      	movs	r3, #2
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315a:	e03e      	b.n	80031da <UART_SetConfig+0x27e>
 800315c:	2304      	movs	r3, #4
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003162:	e03a      	b.n	80031da <UART_SetConfig+0x27e>
 8003164:	2308      	movs	r3, #8
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316a:	e036      	b.n	80031da <UART_SetConfig+0x27e>
 800316c:	2310      	movs	r3, #16
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003172:	e032      	b.n	80031da <UART_SetConfig+0x27e>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a30      	ldr	r2, [pc, #192]	; (800323c <UART_SetConfig+0x2e0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d12a      	bne.n	80031d4 <UART_SetConfig+0x278>
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <UART_SetConfig+0x2e8>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318c:	d01a      	beq.n	80031c4 <UART_SetConfig+0x268>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003192:	d81b      	bhi.n	80031cc <UART_SetConfig+0x270>
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d00c      	beq.n	80031b4 <UART_SetConfig+0x258>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	d815      	bhi.n	80031cc <UART_SetConfig+0x270>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x250>
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d008      	beq.n	80031bc <UART_SetConfig+0x260>
 80031aa:	e00f      	b.n	80031cc <UART_SetConfig+0x270>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b2:	e012      	b.n	80031da <UART_SetConfig+0x27e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ba:	e00e      	b.n	80031da <UART_SetConfig+0x27e>
 80031bc:	2304      	movs	r3, #4
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c2:	e00a      	b.n	80031da <UART_SetConfig+0x27e>
 80031c4:	2308      	movs	r3, #8
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ca:	e006      	b.n	80031da <UART_SetConfig+0x27e>
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d2:	e002      	b.n	80031da <UART_SetConfig+0x27e>
 80031d4:	2310      	movs	r3, #16
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <UART_SetConfig+0x2e0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f040 80a8 	bne.w	8003336 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d834      	bhi.n	8003258 <UART_SetConfig+0x2fc>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x298>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003259 	.word	0x08003259
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003259 	.word	0x08003259
 8003204:	08003227 	.word	0x08003227
 8003208:	08003259 	.word	0x08003259
 800320c:	08003259 	.word	0x08003259
 8003210:	08003259 	.word	0x08003259
 8003214:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe febc 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800321e:	e021      	b.n	8003264 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <UART_SetConfig+0x2f8>)
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003224:	e01e      	b.n	8003264 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fe47 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800322c:	e01a      	b.n	8003264 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003234:	e016      	b.n	8003264 <UART_SetConfig+0x308>
 8003236:	bf00      	nop
 8003238:	cfff69f3 	.word	0xcfff69f3
 800323c:	40008000 	.word	0x40008000
 8003240:	40013800 	.word	0x40013800
 8003244:	40021000 	.word	0x40021000
 8003248:	40004400 	.word	0x40004400
 800324c:	40004800 	.word	0x40004800
 8003250:	40004c00 	.word	0x40004c00
 8003254:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003262:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 812a 	beq.w	80034c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	4a9e      	ldr	r2, [pc, #632]	; (80034ec <UART_SetConfig+0x590>)
 8003272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003276:	461a      	mov	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	fbb3 f3f2 	udiv	r3, r3, r2
 800327e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d305      	bcc.n	800329c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d903      	bls.n	80032a4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032a2:	e10d      	b.n	80034c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	2200      	movs	r2, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	4a8e      	ldr	r2, [pc, #568]	; (80034ec <UART_SetConfig+0x590>)
 80032b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032c6:	f7fc fffb 	bl	80002c0 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	020b      	lsls	r3, r1, #8
 80032dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032e0:	0202      	lsls	r2, r0, #8
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	6849      	ldr	r1, [r1, #4]
 80032e6:	0849      	lsrs	r1, r1, #1
 80032e8:	2000      	movs	r0, #0
 80032ea:	460c      	mov	r4, r1
 80032ec:	4605      	mov	r5, r0
 80032ee:	eb12 0804 	adds.w	r8, r2, r4
 80032f2:	eb43 0905 	adc.w	r9, r3, r5
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	469a      	mov	sl, r3
 80032fe:	4693      	mov	fp, r2
 8003300:	4652      	mov	r2, sl
 8003302:	465b      	mov	r3, fp
 8003304:	4640      	mov	r0, r8
 8003306:	4649      	mov	r1, r9
 8003308:	f7fc ffda 	bl	80002c0 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331a:	d308      	bcc.n	800332e <UART_SetConfig+0x3d2>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003322:	d204      	bcs.n	800332e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e0c8      	b.n	80034c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003334:	e0c4      	b.n	80034c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d167      	bne.n	8003410 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003344:	2b08      	cmp	r3, #8
 8003346:	d828      	bhi.n	800339a <UART_SetConfig+0x43e>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <UART_SetConfig+0x3f4>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003375 	.word	0x08003375
 8003354:	0800337d 	.word	0x0800337d
 8003358:	08003385 	.word	0x08003385
 800335c:	0800339b 	.word	0x0800339b
 8003360:	0800338b 	.word	0x0800338b
 8003364:	0800339b 	.word	0x0800339b
 8003368:	0800339b 	.word	0x0800339b
 800336c:	0800339b 	.word	0x0800339b
 8003370:	08003393 	.word	0x08003393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003374:	f7fe fe0e 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800337a:	e014      	b.n	80033a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800337c:	f7fe fe20 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8003380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003382:	e010      	b.n	80033a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003384:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <UART_SetConfig+0x594>)
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003388:	e00d      	b.n	80033a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338a:	f7fe fd95 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 800338e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003390:	e009      	b.n	80033a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003398:	e005      	b.n	80033a6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8089 	beq.w	80034c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <UART_SetConfig+0x590>)
 80033b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	441a      	add	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d916      	bls.n	8003408 <UART_SetConfig+0x4ac>
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d212      	bcs.n	8003408 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	8bfa      	ldrh	r2, [r7, #30]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	e05b      	b.n	80034c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800340e:	e057      	b.n	80034c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003414:	2b08      	cmp	r3, #8
 8003416:	d828      	bhi.n	800346a <UART_SetConfig+0x50e>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x4c4>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003445 	.word	0x08003445
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003455 	.word	0x08003455
 800342c:	0800346b 	.word	0x0800346b
 8003430:	0800345b 	.word	0x0800345b
 8003434:	0800346b 	.word	0x0800346b
 8003438:	0800346b 	.word	0x0800346b
 800343c:	0800346b 	.word	0x0800346b
 8003440:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7fe fda6 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800344a:	e014      	b.n	8003476 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800344c:	f7fe fdb8 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003452:	e010      	b.n	8003476 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <UART_SetConfig+0x594>)
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003458:	e00d      	b.n	8003476 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7fe fd2d 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003460:	e009      	b.n	8003476 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003468:	e005      	b.n	8003476 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003474:	bf00      	nop
    }

    if (pclk != 0U)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d021      	beq.n	80034c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <UART_SetConfig+0x590>)
 8003482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003486:	461a      	mov	r2, r3
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	fbb3 f2f2 	udiv	r2, r3, r2
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	441a      	add	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d909      	bls.n	80034ba <UART_SetConfig+0x55e>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d205      	bcs.n	80034ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	e002      	b.n	80034c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80034dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3730      	adds	r7, #48	; 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ea:	bf00      	nop
 80034ec:	08004dac 	.word	0x08004dac
 80034f0:	00f42400 	.word	0x00f42400

080034f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01a      	beq.n	800360a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f2:	d10a      	bne.n	800360a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003648:	f7fd fc66 	bl	8000f18 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d10e      	bne.n	800367a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f82f 	bl	80036ce <UART_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e025      	b.n	80036c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d10e      	bne.n	80036a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f819 	bl	80036ce <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b09c      	sub	sp, #112	; 0x70
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036de:	e0a9      	b.n	8003834 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	f000 80a5 	beq.w	8003834 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fd fc15 	bl	8000f18 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <UART_WaitOnFlagUntilTimeout+0x32>
 80036fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d140      	bne.n	8003782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003714:	667b      	str	r3, [r7, #100]	; 0x64
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003720:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800372c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e6      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	663b      	str	r3, [r7, #96]	; 0x60
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003752:	64ba      	str	r2, [r7, #72]	; 0x48
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e069      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d051      	beq.n	8003834 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379e:	d149      	bne.n	8003834 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e6      	bne.n	80037aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	613b      	str	r3, [r7, #16]
   return(result);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037fc:	623a      	str	r2, [r7, #32]
 80037fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	69f9      	ldr	r1, [r7, #28]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	61bb      	str	r3, [r7, #24]
   return(result);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e010      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	429a      	cmp	r2, r3
 8003850:	f43f af46 	beq.w	80036e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3770      	adds	r7, #112	; 0x70
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_UARTEx_DisableFifoMode+0x16>
 8003870:	2302      	movs	r3, #2
 8003872:	e027      	b.n	80038c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80038a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e02d      	b.n	8003944 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f84f 	bl	80039c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e02d      	b.n	80039c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f811 	bl	80039c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039e8:	e031      	b.n	8003a4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039ea:	2308      	movs	r3, #8
 80039ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039ee:	2308      	movs	r3, #8
 80039f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	0e5b      	lsrs	r3, r3, #25
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	0f5b      	lsrs	r3, r3, #29
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	7b3a      	ldrb	r2, [r7, #12]
 8003a16:	4911      	ldr	r1, [pc, #68]	; (8003a5c <UARTEx_SetNbDataToProcess+0x94>)
 8003a18:	5c8a      	ldrb	r2, [r1, r2]
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a1e:	7b3a      	ldrb	r2, [r7, #12]
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <UARTEx_SetNbDataToProcess+0x98>)
 8003a22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	7b7a      	ldrb	r2, [r7, #13]
 8003a34:	4909      	ldr	r1, [pc, #36]	; (8003a5c <UARTEx_SetNbDataToProcess+0x94>)
 8003a36:	5c8a      	ldrb	r2, [r1, r2]
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a3c:	7b7a      	ldrb	r2, [r7, #13]
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <UARTEx_SetNbDataToProcess+0x98>)
 8003a40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a42:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	08004dc4 	.word	0x08004dc4
 8003a60:	08004dcc 	.word	0x08004dcc

08003a64 <std>:
 8003a64:	2300      	movs	r3, #0
 8003a66:	b510      	push	{r4, lr}
 8003a68:	4604      	mov	r4, r0
 8003a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a72:	6083      	str	r3, [r0, #8]
 8003a74:	8181      	strh	r1, [r0, #12]
 8003a76:	6643      	str	r3, [r0, #100]	; 0x64
 8003a78:	81c2      	strh	r2, [r0, #14]
 8003a7a:	6183      	str	r3, [r0, #24]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	2208      	movs	r2, #8
 8003a80:	305c      	adds	r0, #92	; 0x5c
 8003a82:	f000 fa17 	bl	8003eb4 <memset>
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <std+0x58>)
 8003a88:	6263      	str	r3, [r4, #36]	; 0x24
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <std+0x5c>)
 8003a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <std+0x60>)
 8003a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <std+0x64>)
 8003a94:	6323      	str	r3, [r4, #48]	; 0x30
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <std+0x68>)
 8003a98:	6224      	str	r4, [r4, #32]
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d006      	beq.n	8003aac <std+0x48>
 8003a9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003aa2:	4294      	cmp	r4, r2
 8003aa4:	d002      	beq.n	8003aac <std+0x48>
 8003aa6:	33d0      	adds	r3, #208	; 0xd0
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d105      	bne.n	8003ab8 <std+0x54>
 8003aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ab4:	f000 ba76 	b.w	8003fa4 <__retarget_lock_init_recursive>
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	08003d05 	.word	0x08003d05
 8003ac0:	08003d27 	.word	0x08003d27
 8003ac4:	08003d5f 	.word	0x08003d5f
 8003ac8:	08003d83 	.word	0x08003d83
 8003acc:	20000144 	.word	0x20000144

08003ad0 <stdio_exit_handler>:
 8003ad0:	4a02      	ldr	r2, [pc, #8]	; (8003adc <stdio_exit_handler+0xc>)
 8003ad2:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <stdio_exit_handler+0x10>)
 8003ad4:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <stdio_exit_handler+0x14>)
 8003ad6:	f000 b869 	b.w	8003bac <_fwalk_sglue>
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	08004b01 	.word	0x08004b01
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <cleanup_stdio>:
 8003ae8:	6841      	ldr	r1, [r0, #4]
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <cleanup_stdio+0x34>)
 8003aec:	4299      	cmp	r1, r3
 8003aee:	b510      	push	{r4, lr}
 8003af0:	4604      	mov	r4, r0
 8003af2:	d001      	beq.n	8003af8 <cleanup_stdio+0x10>
 8003af4:	f001 f804 	bl	8004b00 <_fflush_r>
 8003af8:	68a1      	ldr	r1, [r4, #8]
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <cleanup_stdio+0x38>)
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d002      	beq.n	8003b06 <cleanup_stdio+0x1e>
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 fffd 	bl	8004b00 <_fflush_r>
 8003b06:	68e1      	ldr	r1, [r4, #12]
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <cleanup_stdio+0x3c>)
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d004      	beq.n	8003b18 <cleanup_stdio+0x30>
 8003b0e:	4620      	mov	r0, r4
 8003b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b14:	f000 bff4 	b.w	8004b00 <_fflush_r>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000144 	.word	0x20000144
 8003b20:	200001ac 	.word	0x200001ac
 8003b24:	20000214 	.word	0x20000214

08003b28 <global_stdio_init.part.0>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <global_stdio_init.part.0+0x30>)
 8003b2c:	4c0b      	ldr	r4, [pc, #44]	; (8003b5c <global_stdio_init.part.0+0x34>)
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <global_stdio_init.part.0+0x38>)
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	4620      	mov	r0, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	2104      	movs	r1, #4
 8003b38:	f7ff ff94 	bl	8003a64 <std>
 8003b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b40:	2201      	movs	r2, #1
 8003b42:	2109      	movs	r1, #9
 8003b44:	f7ff ff8e 	bl	8003a64 <std>
 8003b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b52:	2112      	movs	r1, #18
 8003b54:	f7ff bf86 	b.w	8003a64 <std>
 8003b58:	2000027c 	.word	0x2000027c
 8003b5c:	20000144 	.word	0x20000144
 8003b60:	08003ad1 	.word	0x08003ad1

08003b64 <__sfp_lock_acquire>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__sfp_lock_acquire+0x8>)
 8003b66:	f000 ba1e 	b.w	8003fa6 <__retarget_lock_acquire_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000285 	.word	0x20000285

08003b70 <__sfp_lock_release>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__sfp_lock_release+0x8>)
 8003b72:	f000 ba19 	b.w	8003fa8 <__retarget_lock_release_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000285 	.word	0x20000285

08003b7c <__sinit>:
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4604      	mov	r4, r0
 8003b80:	f7ff fff0 	bl	8003b64 <__sfp_lock_acquire>
 8003b84:	6a23      	ldr	r3, [r4, #32]
 8003b86:	b11b      	cbz	r3, 8003b90 <__sinit+0x14>
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8c:	f7ff bff0 	b.w	8003b70 <__sfp_lock_release>
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <__sinit+0x28>)
 8003b92:	6223      	str	r3, [r4, #32]
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__sinit+0x2c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f5      	bne.n	8003b88 <__sinit+0xc>
 8003b9c:	f7ff ffc4 	bl	8003b28 <global_stdio_init.part.0>
 8003ba0:	e7f2      	b.n	8003b88 <__sinit+0xc>
 8003ba2:	bf00      	nop
 8003ba4:	08003ae9 	.word	0x08003ae9
 8003ba8:	2000027c 	.word	0x2000027c

08003bac <_fwalk_sglue>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8003bc0:	d505      	bpl.n	8003bce <_fwalk_sglue+0x22>
 8003bc2:	6824      	ldr	r4, [r4, #0]
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	d1f7      	bne.n	8003bb8 <_fwalk_sglue+0xc>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bce:	89ab      	ldrh	r3, [r5, #12]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d907      	bls.n	8003be4 <_fwalk_sglue+0x38>
 8003bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	d003      	beq.n	8003be4 <_fwalk_sglue+0x38>
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4638      	mov	r0, r7
 8003be0:	47c0      	blx	r8
 8003be2:	4306      	orrs	r6, r0
 8003be4:	3568      	adds	r5, #104	; 0x68
 8003be6:	e7e9      	b.n	8003bbc <_fwalk_sglue+0x10>

08003be8 <iprintf>:
 8003be8:	b40f      	push	{r0, r1, r2, r3}
 8003bea:	b507      	push	{r0, r1, r2, lr}
 8003bec:	4906      	ldr	r1, [pc, #24]	; (8003c08 <iprintf+0x20>)
 8003bee:	ab04      	add	r3, sp, #16
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bf6:	6881      	ldr	r1, [r0, #8]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	f000 fc51 	bl	80044a0 <_vfiprintf_r>
 8003bfe:	b003      	add	sp, #12
 8003c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c04:	b004      	add	sp, #16
 8003c06:	4770      	bx	lr
 8003c08:	20000064 	.word	0x20000064

08003c0c <_puts_r>:
 8003c0c:	6a03      	ldr	r3, [r0, #32]
 8003c0e:	b570      	push	{r4, r5, r6, lr}
 8003c10:	6884      	ldr	r4, [r0, #8]
 8003c12:	4605      	mov	r5, r0
 8003c14:	460e      	mov	r6, r1
 8003c16:	b90b      	cbnz	r3, 8003c1c <_puts_r+0x10>
 8003c18:	f7ff ffb0 	bl	8003b7c <__sinit>
 8003c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d405      	bmi.n	8003c2e <_puts_r+0x22>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	0598      	lsls	r0, r3, #22
 8003c26:	d402      	bmi.n	8003c2e <_puts_r+0x22>
 8003c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2a:	f000 f9bc 	bl	8003fa6 <__retarget_lock_acquire_recursive>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	0719      	lsls	r1, r3, #28
 8003c32:	d513      	bpl.n	8003c5c <_puts_r+0x50>
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	b18b      	cbz	r3, 8003c5c <_puts_r+0x50>
 8003c38:	3e01      	subs	r6, #1
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60a3      	str	r3, [r4, #8]
 8003c44:	b9e9      	cbnz	r1, 8003c82 <_puts_r+0x76>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da2e      	bge.n	8003ca8 <_puts_r+0x9c>
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f89b 	bl	8003d8a <__swbuf_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d007      	beq.n	8003c68 <_puts_r+0x5c>
 8003c58:	250a      	movs	r5, #10
 8003c5a:	e007      	b.n	8003c6c <_puts_r+0x60>
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f000 f8d0 	bl	8003e04 <__swsetup_r>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d0e7      	beq.n	8003c38 <_puts_r+0x2c>
 8003c68:	f04f 35ff 	mov.w	r5, #4294967295
 8003c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c6e:	07da      	lsls	r2, r3, #31
 8003c70:	d405      	bmi.n	8003c7e <_puts_r+0x72>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	059b      	lsls	r3, r3, #22
 8003c76:	d402      	bmi.n	8003c7e <_puts_r+0x72>
 8003c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7a:	f000 f995 	bl	8003fa8 <__retarget_lock_release_recursive>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da04      	bge.n	8003c90 <_puts_r+0x84>
 8003c86:	69a2      	ldr	r2, [r4, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dc06      	bgt.n	8003c9a <_puts_r+0x8e>
 8003c8c:	290a      	cmp	r1, #10
 8003c8e:	d004      	beq.n	8003c9a <_puts_r+0x8e>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	7019      	strb	r1, [r3, #0]
 8003c98:	e7cf      	b.n	8003c3a <_puts_r+0x2e>
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f874 	bl	8003d8a <__swbuf_r>
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d1c9      	bne.n	8003c3a <_puts_r+0x2e>
 8003ca6:	e7df      	b.n	8003c68 <_puts_r+0x5c>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	250a      	movs	r5, #10
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	6022      	str	r2, [r4, #0]
 8003cb0:	701d      	strb	r5, [r3, #0]
 8003cb2:	e7db      	b.n	8003c6c <_puts_r+0x60>

08003cb4 <puts>:
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <puts+0xc>)
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	f7ff bfa7 	b.w	8003c0c <_puts_r>
 8003cbe:	bf00      	nop
 8003cc0:	20000064 	.word	0x20000064

08003cc4 <siprintf>:
 8003cc4:	b40e      	push	{r1, r2, r3}
 8003cc6:	b500      	push	{lr}
 8003cc8:	b09c      	sub	sp, #112	; 0x70
 8003cca:	ab1d      	add	r3, sp, #116	; 0x74
 8003ccc:	9002      	str	r0, [sp, #8]
 8003cce:	9006      	str	r0, [sp, #24]
 8003cd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cd4:	4809      	ldr	r0, [pc, #36]	; (8003cfc <siprintf+0x38>)
 8003cd6:	9107      	str	r1, [sp, #28]
 8003cd8:	9104      	str	r1, [sp, #16]
 8003cda:	4909      	ldr	r1, [pc, #36]	; (8003d00 <siprintf+0x3c>)
 8003cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce0:	9105      	str	r1, [sp, #20]
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	a902      	add	r1, sp, #8
 8003ce8:	f000 fab2 	bl	8004250 <_svfiprintf_r>
 8003cec:	9b02      	ldr	r3, [sp, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	b01c      	add	sp, #112	; 0x70
 8003cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf8:	b003      	add	sp, #12
 8003cfa:	4770      	bx	lr
 8003cfc:	20000064 	.word	0x20000064
 8003d00:	ffff0208 	.word	0xffff0208

08003d04 <__sread>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	460c      	mov	r4, r1
 8003d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0c:	f000 f8fc 	bl	8003f08 <_read_r>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	bfab      	itete	ge
 8003d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d16:	89a3      	ldrhlt	r3, [r4, #12]
 8003d18:	181b      	addge	r3, r3, r0
 8003d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d1e:	bfac      	ite	ge
 8003d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d22:	81a3      	strhlt	r3, [r4, #12]
 8003d24:	bd10      	pop	{r4, pc}

08003d26 <__swrite>:
 8003d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2a:	461f      	mov	r7, r3
 8003d2c:	898b      	ldrh	r3, [r1, #12]
 8003d2e:	05db      	lsls	r3, r3, #23
 8003d30:	4605      	mov	r5, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	4616      	mov	r6, r2
 8003d36:	d505      	bpl.n	8003d44 <__swrite+0x1e>
 8003d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f000 f8d0 	bl	8003ee4 <_lseek_r>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	4632      	mov	r2, r6
 8003d52:	463b      	mov	r3, r7
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5a:	f000 b8e7 	b.w	8003f2c <_write_r>

08003d5e <__sseek>:
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	460c      	mov	r4, r1
 8003d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d66:	f000 f8bd 	bl	8003ee4 <_lseek_r>
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	bf15      	itete	ne
 8003d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d7a:	81a3      	strheq	r3, [r4, #12]
 8003d7c:	bf18      	it	ne
 8003d7e:	81a3      	strhne	r3, [r4, #12]
 8003d80:	bd10      	pop	{r4, pc}

08003d82 <__sclose>:
 8003d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d86:	f000 b89d 	b.w	8003ec4 <_close_r>

08003d8a <__swbuf_r>:
 8003d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8c:	460e      	mov	r6, r1
 8003d8e:	4614      	mov	r4, r2
 8003d90:	4605      	mov	r5, r0
 8003d92:	b118      	cbz	r0, 8003d9c <__swbuf_r+0x12>
 8003d94:	6a03      	ldr	r3, [r0, #32]
 8003d96:	b90b      	cbnz	r3, 8003d9c <__swbuf_r+0x12>
 8003d98:	f7ff fef0 	bl	8003b7c <__sinit>
 8003d9c:	69a3      	ldr	r3, [r4, #24]
 8003d9e:	60a3      	str	r3, [r4, #8]
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	071a      	lsls	r2, r3, #28
 8003da4:	d525      	bpl.n	8003df2 <__swbuf_r+0x68>
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	b31b      	cbz	r3, 8003df2 <__swbuf_r+0x68>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	6922      	ldr	r2, [r4, #16]
 8003dae:	1a98      	subs	r0, r3, r2
 8003db0:	6963      	ldr	r3, [r4, #20]
 8003db2:	b2f6      	uxtb	r6, r6
 8003db4:	4283      	cmp	r3, r0
 8003db6:	4637      	mov	r7, r6
 8003db8:	dc04      	bgt.n	8003dc4 <__swbuf_r+0x3a>
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fe9f 	bl	8004b00 <_fflush_r>
 8003dc2:	b9e0      	cbnz	r0, 8003dfe <__swbuf_r+0x74>
 8003dc4:	68a3      	ldr	r3, [r4, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	60a3      	str	r3, [r4, #8]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	6022      	str	r2, [r4, #0]
 8003dd0:	701e      	strb	r6, [r3, #0]
 8003dd2:	6962      	ldr	r2, [r4, #20]
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d004      	beq.n	8003de4 <__swbuf_r+0x5a>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	07db      	lsls	r3, r3, #31
 8003dde:	d506      	bpl.n	8003dee <__swbuf_r+0x64>
 8003de0:	2e0a      	cmp	r6, #10
 8003de2:	d104      	bne.n	8003dee <__swbuf_r+0x64>
 8003de4:	4621      	mov	r1, r4
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fe8a 	bl	8004b00 <_fflush_r>
 8003dec:	b938      	cbnz	r0, 8003dfe <__swbuf_r+0x74>
 8003dee:	4638      	mov	r0, r7
 8003df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 f805 	bl	8003e04 <__swsetup_r>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d0d5      	beq.n	8003daa <__swbuf_r+0x20>
 8003dfe:	f04f 37ff 	mov.w	r7, #4294967295
 8003e02:	e7f4      	b.n	8003dee <__swbuf_r+0x64>

08003e04 <__swsetup_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <__swsetup_r+0xac>)
 8003e08:	4605      	mov	r5, r0
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	b118      	cbz	r0, 8003e18 <__swsetup_r+0x14>
 8003e10:	6a03      	ldr	r3, [r0, #32]
 8003e12:	b90b      	cbnz	r3, 8003e18 <__swsetup_r+0x14>
 8003e14:	f7ff feb2 	bl	8003b7c <__sinit>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e1e:	0718      	lsls	r0, r3, #28
 8003e20:	d422      	bmi.n	8003e68 <__swsetup_r+0x64>
 8003e22:	06d9      	lsls	r1, r3, #27
 8003e24:	d407      	bmi.n	8003e36 <__swsetup_r+0x32>
 8003e26:	2309      	movs	r3, #9
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e2e:	81a3      	strh	r3, [r4, #12]
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	e034      	b.n	8003ea0 <__swsetup_r+0x9c>
 8003e36:	0758      	lsls	r0, r3, #29
 8003e38:	d512      	bpl.n	8003e60 <__swsetup_r+0x5c>
 8003e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e3c:	b141      	cbz	r1, 8003e50 <__swsetup_r+0x4c>
 8003e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e42:	4299      	cmp	r1, r3
 8003e44:	d002      	beq.n	8003e4c <__swsetup_r+0x48>
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f8b0 	bl	8003fac <_free_r>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6363      	str	r3, [r4, #52]	; 0x34
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	b94b      	cbnz	r3, 8003e80 <__swsetup_r+0x7c>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e76:	d003      	beq.n	8003e80 <__swsetup_r+0x7c>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 fe8e 	bl	8004b9c <__smakebuf_r>
 8003e80:	89a0      	ldrh	r0, [r4, #12]
 8003e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e86:	f010 0301 	ands.w	r3, r0, #1
 8003e8a:	d00a      	beq.n	8003ea2 <__swsetup_r+0x9e>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60a3      	str	r3, [r4, #8]
 8003e90:	6963      	ldr	r3, [r4, #20]
 8003e92:	425b      	negs	r3, r3
 8003e94:	61a3      	str	r3, [r4, #24]
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	b943      	cbnz	r3, 8003eac <__swsetup_r+0xa8>
 8003e9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e9e:	d1c4      	bne.n	8003e2a <__swsetup_r+0x26>
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
 8003ea2:	0781      	lsls	r1, r0, #30
 8003ea4:	bf58      	it	pl
 8003ea6:	6963      	ldrpl	r3, [r4, #20]
 8003ea8:	60a3      	str	r3, [r4, #8]
 8003eaa:	e7f4      	b.n	8003e96 <__swsetup_r+0x92>
 8003eac:	2000      	movs	r0, #0
 8003eae:	e7f7      	b.n	8003ea0 <__swsetup_r+0x9c>
 8003eb0:	20000064 	.word	0x20000064

08003eb4 <memset>:
 8003eb4:	4402      	add	r2, r0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d100      	bne.n	8003ebe <memset+0xa>
 8003ebc:	4770      	bx	lr
 8003ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec2:	e7f9      	b.n	8003eb8 <memset+0x4>

08003ec4 <_close_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d06      	ldr	r5, [pc, #24]	; (8003ee0 <_close_r+0x1c>)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f7fc ff17 	bl	8000d02 <_close>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_close_r+0x1a>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_close_r+0x1a>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	20000280 	.word	0x20000280

08003ee4 <_lseek_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4d07      	ldr	r5, [pc, #28]	; (8003f04 <_lseek_r+0x20>)
 8003ee8:	4604      	mov	r4, r0
 8003eea:	4608      	mov	r0, r1
 8003eec:	4611      	mov	r1, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fc ff2c 	bl	8000d50 <_lseek>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_lseek_r+0x1e>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_lseek_r+0x1e>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	20000280 	.word	0x20000280

08003f08 <_read_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4d07      	ldr	r5, [pc, #28]	; (8003f28 <_read_r+0x20>)
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4608      	mov	r0, r1
 8003f10:	4611      	mov	r1, r2
 8003f12:	2200      	movs	r2, #0
 8003f14:	602a      	str	r2, [r5, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7fc feba 	bl	8000c90 <_read>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_read_r+0x1e>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_read_r+0x1e>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	20000280 	.word	0x20000280

08003f2c <_write_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4d07      	ldr	r5, [pc, #28]	; (8003f4c <_write_r+0x20>)
 8003f30:	4604      	mov	r4, r0
 8003f32:	4608      	mov	r0, r1
 8003f34:	4611      	mov	r1, r2
 8003f36:	2200      	movs	r2, #0
 8003f38:	602a      	str	r2, [r5, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7fc fec5 	bl	8000cca <_write>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_write_r+0x1e>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_write_r+0x1e>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20000280 	.word	0x20000280

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000064 	.word	0x20000064

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4d0d      	ldr	r5, [pc, #52]	; (8003f94 <__libc_init_array+0x38>)
 8003f60:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f62:	1b64      	subs	r4, r4, r5
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	2600      	movs	r6, #0
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	4d0b      	ldr	r5, [pc, #44]	; (8003f9c <__libc_init_array+0x40>)
 8003f6e:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <__libc_init_array+0x44>)
 8003f70:	f000 fee2 	bl	8004d38 <_init>
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	2600      	movs	r6, #0
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	08004e10 	.word	0x08004e10
 8003f98:	08004e10 	.word	0x08004e10
 8003f9c:	08004e10 	.word	0x08004e10
 8003fa0:	08004e14 	.word	0x08004e14

08003fa4 <__retarget_lock_init_recursive>:
 8003fa4:	4770      	bx	lr

08003fa6 <__retarget_lock_acquire_recursive>:
 8003fa6:	4770      	bx	lr

08003fa8 <__retarget_lock_release_recursive>:
 8003fa8:	4770      	bx	lr
	...

08003fac <_free_r>:
 8003fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d044      	beq.n	800403c <_free_r+0x90>
 8003fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb6:	9001      	str	r0, [sp, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f1a1 0404 	sub.w	r4, r1, #4
 8003fbe:	bfb8      	it	lt
 8003fc0:	18e4      	addlt	r4, r4, r3
 8003fc2:	f000 f8df 	bl	8004184 <__malloc_lock>
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <_free_r+0x94>)
 8003fc8:	9801      	ldr	r0, [sp, #4]
 8003fca:	6813      	ldr	r3, [r2, #0]
 8003fcc:	b933      	cbnz	r3, 8003fdc <_free_r+0x30>
 8003fce:	6063      	str	r3, [r4, #4]
 8003fd0:	6014      	str	r4, [r2, #0]
 8003fd2:	b003      	add	sp, #12
 8003fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fd8:	f000 b8da 	b.w	8004190 <__malloc_unlock>
 8003fdc:	42a3      	cmp	r3, r4
 8003fde:	d908      	bls.n	8003ff2 <_free_r+0x46>
 8003fe0:	6825      	ldr	r5, [r4, #0]
 8003fe2:	1961      	adds	r1, r4, r5
 8003fe4:	428b      	cmp	r3, r1
 8003fe6:	bf01      	itttt	eq
 8003fe8:	6819      	ldreq	r1, [r3, #0]
 8003fea:	685b      	ldreq	r3, [r3, #4]
 8003fec:	1949      	addeq	r1, r1, r5
 8003fee:	6021      	streq	r1, [r4, #0]
 8003ff0:	e7ed      	b.n	8003fce <_free_r+0x22>
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	b10b      	cbz	r3, 8003ffc <_free_r+0x50>
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d9fa      	bls.n	8003ff2 <_free_r+0x46>
 8003ffc:	6811      	ldr	r1, [r2, #0]
 8003ffe:	1855      	adds	r5, r2, r1
 8004000:	42a5      	cmp	r5, r4
 8004002:	d10b      	bne.n	800401c <_free_r+0x70>
 8004004:	6824      	ldr	r4, [r4, #0]
 8004006:	4421      	add	r1, r4
 8004008:	1854      	adds	r4, r2, r1
 800400a:	42a3      	cmp	r3, r4
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	d1e0      	bne.n	8003fd2 <_free_r+0x26>
 8004010:	681c      	ldr	r4, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	6053      	str	r3, [r2, #4]
 8004016:	440c      	add	r4, r1
 8004018:	6014      	str	r4, [r2, #0]
 800401a:	e7da      	b.n	8003fd2 <_free_r+0x26>
 800401c:	d902      	bls.n	8004024 <_free_r+0x78>
 800401e:	230c      	movs	r3, #12
 8004020:	6003      	str	r3, [r0, #0]
 8004022:	e7d6      	b.n	8003fd2 <_free_r+0x26>
 8004024:	6825      	ldr	r5, [r4, #0]
 8004026:	1961      	adds	r1, r4, r5
 8004028:	428b      	cmp	r3, r1
 800402a:	bf04      	itt	eq
 800402c:	6819      	ldreq	r1, [r3, #0]
 800402e:	685b      	ldreq	r3, [r3, #4]
 8004030:	6063      	str	r3, [r4, #4]
 8004032:	bf04      	itt	eq
 8004034:	1949      	addeq	r1, r1, r5
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	6054      	str	r4, [r2, #4]
 800403a:	e7ca      	b.n	8003fd2 <_free_r+0x26>
 800403c:	b003      	add	sp, #12
 800403e:	bd30      	pop	{r4, r5, pc}
 8004040:	20000288 	.word	0x20000288

08004044 <sbrk_aligned>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4e0e      	ldr	r6, [pc, #56]	; (8004080 <sbrk_aligned+0x3c>)
 8004048:	460c      	mov	r4, r1
 800404a:	6831      	ldr	r1, [r6, #0]
 800404c:	4605      	mov	r5, r0
 800404e:	b911      	cbnz	r1, 8004056 <sbrk_aligned+0x12>
 8004050:	f000 fe1c 	bl	8004c8c <_sbrk_r>
 8004054:	6030      	str	r0, [r6, #0]
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fe17 	bl	8004c8c <_sbrk_r>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d00a      	beq.n	8004078 <sbrk_aligned+0x34>
 8004062:	1cc4      	adds	r4, r0, #3
 8004064:	f024 0403 	bic.w	r4, r4, #3
 8004068:	42a0      	cmp	r0, r4
 800406a:	d007      	beq.n	800407c <sbrk_aligned+0x38>
 800406c:	1a21      	subs	r1, r4, r0
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fe0c 	bl	8004c8c <_sbrk_r>
 8004074:	3001      	adds	r0, #1
 8004076:	d101      	bne.n	800407c <sbrk_aligned+0x38>
 8004078:	f04f 34ff 	mov.w	r4, #4294967295
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	2000028c 	.word	0x2000028c

08004084 <_malloc_r>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	1ccd      	adds	r5, r1, #3
 800408a:	f025 0503 	bic.w	r5, r5, #3
 800408e:	3508      	adds	r5, #8
 8004090:	2d0c      	cmp	r5, #12
 8004092:	bf38      	it	cc
 8004094:	250c      	movcc	r5, #12
 8004096:	2d00      	cmp	r5, #0
 8004098:	4607      	mov	r7, r0
 800409a:	db01      	blt.n	80040a0 <_malloc_r+0x1c>
 800409c:	42a9      	cmp	r1, r5
 800409e:	d905      	bls.n	80040ac <_malloc_r+0x28>
 80040a0:	230c      	movs	r3, #12
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	2600      	movs	r6, #0
 80040a6:	4630      	mov	r0, r6
 80040a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004180 <_malloc_r+0xfc>
 80040b0:	f000 f868 	bl	8004184 <__malloc_lock>
 80040b4:	f8d8 3000 	ldr.w	r3, [r8]
 80040b8:	461c      	mov	r4, r3
 80040ba:	bb5c      	cbnz	r4, 8004114 <_malloc_r+0x90>
 80040bc:	4629      	mov	r1, r5
 80040be:	4638      	mov	r0, r7
 80040c0:	f7ff ffc0 	bl	8004044 <sbrk_aligned>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	4604      	mov	r4, r0
 80040c8:	d155      	bne.n	8004176 <_malloc_r+0xf2>
 80040ca:	f8d8 4000 	ldr.w	r4, [r8]
 80040ce:	4626      	mov	r6, r4
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	d145      	bne.n	8004160 <_malloc_r+0xdc>
 80040d4:	2c00      	cmp	r4, #0
 80040d6:	d048      	beq.n	800416a <_malloc_r+0xe6>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	4631      	mov	r1, r6
 80040dc:	4638      	mov	r0, r7
 80040de:	eb04 0903 	add.w	r9, r4, r3
 80040e2:	f000 fdd3 	bl	8004c8c <_sbrk_r>
 80040e6:	4581      	cmp	r9, r0
 80040e8:	d13f      	bne.n	800416a <_malloc_r+0xe6>
 80040ea:	6821      	ldr	r1, [r4, #0]
 80040ec:	1a6d      	subs	r5, r5, r1
 80040ee:	4629      	mov	r1, r5
 80040f0:	4638      	mov	r0, r7
 80040f2:	f7ff ffa7 	bl	8004044 <sbrk_aligned>
 80040f6:	3001      	adds	r0, #1
 80040f8:	d037      	beq.n	800416a <_malloc_r+0xe6>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	442b      	add	r3, r5
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	f8d8 3000 	ldr.w	r3, [r8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d038      	beq.n	800417a <_malloc_r+0xf6>
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	42a2      	cmp	r2, r4
 800410c:	d12b      	bne.n	8004166 <_malloc_r+0xe2>
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e00f      	b.n	8004134 <_malloc_r+0xb0>
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	1b52      	subs	r2, r2, r5
 8004118:	d41f      	bmi.n	800415a <_malloc_r+0xd6>
 800411a:	2a0b      	cmp	r2, #11
 800411c:	d917      	bls.n	800414e <_malloc_r+0xca>
 800411e:	1961      	adds	r1, r4, r5
 8004120:	42a3      	cmp	r3, r4
 8004122:	6025      	str	r5, [r4, #0]
 8004124:	bf18      	it	ne
 8004126:	6059      	strne	r1, [r3, #4]
 8004128:	6863      	ldr	r3, [r4, #4]
 800412a:	bf08      	it	eq
 800412c:	f8c8 1000 	streq.w	r1, [r8]
 8004130:	5162      	str	r2, [r4, r5]
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	4638      	mov	r0, r7
 8004136:	f104 060b 	add.w	r6, r4, #11
 800413a:	f000 f829 	bl	8004190 <__malloc_unlock>
 800413e:	f026 0607 	bic.w	r6, r6, #7
 8004142:	1d23      	adds	r3, r4, #4
 8004144:	1af2      	subs	r2, r6, r3
 8004146:	d0ae      	beq.n	80040a6 <_malloc_r+0x22>
 8004148:	1b9b      	subs	r3, r3, r6
 800414a:	50a3      	str	r3, [r4, r2]
 800414c:	e7ab      	b.n	80040a6 <_malloc_r+0x22>
 800414e:	42a3      	cmp	r3, r4
 8004150:	6862      	ldr	r2, [r4, #4]
 8004152:	d1dd      	bne.n	8004110 <_malloc_r+0x8c>
 8004154:	f8c8 2000 	str.w	r2, [r8]
 8004158:	e7ec      	b.n	8004134 <_malloc_r+0xb0>
 800415a:	4623      	mov	r3, r4
 800415c:	6864      	ldr	r4, [r4, #4]
 800415e:	e7ac      	b.n	80040ba <_malloc_r+0x36>
 8004160:	4634      	mov	r4, r6
 8004162:	6876      	ldr	r6, [r6, #4]
 8004164:	e7b4      	b.n	80040d0 <_malloc_r+0x4c>
 8004166:	4613      	mov	r3, r2
 8004168:	e7cc      	b.n	8004104 <_malloc_r+0x80>
 800416a:	230c      	movs	r3, #12
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4638      	mov	r0, r7
 8004170:	f000 f80e 	bl	8004190 <__malloc_unlock>
 8004174:	e797      	b.n	80040a6 <_malloc_r+0x22>
 8004176:	6025      	str	r5, [r4, #0]
 8004178:	e7dc      	b.n	8004134 <_malloc_r+0xb0>
 800417a:	605b      	str	r3, [r3, #4]
 800417c:	deff      	udf	#255	; 0xff
 800417e:	bf00      	nop
 8004180:	20000288 	.word	0x20000288

08004184 <__malloc_lock>:
 8004184:	4801      	ldr	r0, [pc, #4]	; (800418c <__malloc_lock+0x8>)
 8004186:	f7ff bf0e 	b.w	8003fa6 <__retarget_lock_acquire_recursive>
 800418a:	bf00      	nop
 800418c:	20000284 	.word	0x20000284

08004190 <__malloc_unlock>:
 8004190:	4801      	ldr	r0, [pc, #4]	; (8004198 <__malloc_unlock+0x8>)
 8004192:	f7ff bf09 	b.w	8003fa8 <__retarget_lock_release_recursive>
 8004196:	bf00      	nop
 8004198:	20000284 	.word	0x20000284

0800419c <__ssputs_r>:
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	688e      	ldr	r6, [r1, #8]
 80041a2:	461f      	mov	r7, r3
 80041a4:	42be      	cmp	r6, r7
 80041a6:	680b      	ldr	r3, [r1, #0]
 80041a8:	4682      	mov	sl, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	4690      	mov	r8, r2
 80041ae:	d82c      	bhi.n	800420a <__ssputs_r+0x6e>
 80041b0:	898a      	ldrh	r2, [r1, #12]
 80041b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041b6:	d026      	beq.n	8004206 <__ssputs_r+0x6a>
 80041b8:	6965      	ldr	r5, [r4, #20]
 80041ba:	6909      	ldr	r1, [r1, #16]
 80041bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c0:	eba3 0901 	sub.w	r9, r3, r1
 80041c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041c8:	1c7b      	adds	r3, r7, #1
 80041ca:	444b      	add	r3, r9
 80041cc:	106d      	asrs	r5, r5, #1
 80041ce:	429d      	cmp	r5, r3
 80041d0:	bf38      	it	cc
 80041d2:	461d      	movcc	r5, r3
 80041d4:	0553      	lsls	r3, r2, #21
 80041d6:	d527      	bpl.n	8004228 <__ssputs_r+0x8c>
 80041d8:	4629      	mov	r1, r5
 80041da:	f7ff ff53 	bl	8004084 <_malloc_r>
 80041de:	4606      	mov	r6, r0
 80041e0:	b360      	cbz	r0, 800423c <__ssputs_r+0xa0>
 80041e2:	6921      	ldr	r1, [r4, #16]
 80041e4:	464a      	mov	r2, r9
 80041e6:	f000 fd61 	bl	8004cac <memcpy>
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	6126      	str	r6, [r4, #16]
 80041f8:	6165      	str	r5, [r4, #20]
 80041fa:	444e      	add	r6, r9
 80041fc:	eba5 0509 	sub.w	r5, r5, r9
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	60a5      	str	r5, [r4, #8]
 8004204:	463e      	mov	r6, r7
 8004206:	42be      	cmp	r6, r7
 8004208:	d900      	bls.n	800420c <__ssputs_r+0x70>
 800420a:	463e      	mov	r6, r7
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	4632      	mov	r2, r6
 8004210:	4641      	mov	r1, r8
 8004212:	f000 fcff 	bl	8004c14 <memmove>
 8004216:	68a3      	ldr	r3, [r4, #8]
 8004218:	1b9b      	subs	r3, r3, r6
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	4433      	add	r3, r6
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	2000      	movs	r0, #0
 8004224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004228:	462a      	mov	r2, r5
 800422a:	f000 fd4d 	bl	8004cc8 <_realloc_r>
 800422e:	4606      	mov	r6, r0
 8004230:	2800      	cmp	r0, #0
 8004232:	d1e0      	bne.n	80041f6 <__ssputs_r+0x5a>
 8004234:	6921      	ldr	r1, [r4, #16]
 8004236:	4650      	mov	r0, sl
 8004238:	f7ff feb8 	bl	8003fac <_free_r>
 800423c:	230c      	movs	r3, #12
 800423e:	f8ca 3000 	str.w	r3, [sl]
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	e7e9      	b.n	8004224 <__ssputs_r+0x88>

08004250 <_svfiprintf_r>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	4698      	mov	r8, r3
 8004256:	898b      	ldrh	r3, [r1, #12]
 8004258:	061b      	lsls	r3, r3, #24
 800425a:	b09d      	sub	sp, #116	; 0x74
 800425c:	4607      	mov	r7, r0
 800425e:	460d      	mov	r5, r1
 8004260:	4614      	mov	r4, r2
 8004262:	d50e      	bpl.n	8004282 <_svfiprintf_r+0x32>
 8004264:	690b      	ldr	r3, [r1, #16]
 8004266:	b963      	cbnz	r3, 8004282 <_svfiprintf_r+0x32>
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	f7ff ff0b 	bl	8004084 <_malloc_r>
 800426e:	6028      	str	r0, [r5, #0]
 8004270:	6128      	str	r0, [r5, #16]
 8004272:	b920      	cbnz	r0, 800427e <_svfiprintf_r+0x2e>
 8004274:	230c      	movs	r3, #12
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	e0d0      	b.n	8004420 <_svfiprintf_r+0x1d0>
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	616b      	str	r3, [r5, #20]
 8004282:	2300      	movs	r3, #0
 8004284:	9309      	str	r3, [sp, #36]	; 0x24
 8004286:	2320      	movs	r3, #32
 8004288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800428c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004290:	2330      	movs	r3, #48	; 0x30
 8004292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004438 <_svfiprintf_r+0x1e8>
 8004296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	4623      	mov	r3, r4
 80042a0:	469a      	mov	sl, r3
 80042a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a6:	b10a      	cbz	r2, 80042ac <_svfiprintf_r+0x5c>
 80042a8:	2a25      	cmp	r2, #37	; 0x25
 80042aa:	d1f9      	bne.n	80042a0 <_svfiprintf_r+0x50>
 80042ac:	ebba 0b04 	subs.w	fp, sl, r4
 80042b0:	d00b      	beq.n	80042ca <_svfiprintf_r+0x7a>
 80042b2:	465b      	mov	r3, fp
 80042b4:	4622      	mov	r2, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff ff6f 	bl	800419c <__ssputs_r>
 80042be:	3001      	adds	r0, #1
 80042c0:	f000 80a9 	beq.w	8004416 <_svfiprintf_r+0x1c6>
 80042c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c6:	445a      	add	r2, fp
 80042c8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ca:	f89a 3000 	ldrb.w	r3, [sl]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a1 	beq.w	8004416 <_svfiprintf_r+0x1c6>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042de:	f10a 0a01 	add.w	sl, sl, #1
 80042e2:	9304      	str	r3, [sp, #16]
 80042e4:	9307      	str	r3, [sp, #28]
 80042e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ea:	931a      	str	r3, [sp, #104]	; 0x68
 80042ec:	4654      	mov	r4, sl
 80042ee:	2205      	movs	r2, #5
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	4850      	ldr	r0, [pc, #320]	; (8004438 <_svfiprintf_r+0x1e8>)
 80042f6:	f7fb ff93 	bl	8000220 <memchr>
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	b9d8      	cbnz	r0, 8004336 <_svfiprintf_r+0xe6>
 80042fe:	06d0      	lsls	r0, r2, #27
 8004300:	bf44      	itt	mi
 8004302:	2320      	movmi	r3, #32
 8004304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004308:	0711      	lsls	r1, r2, #28
 800430a:	bf44      	itt	mi
 800430c:	232b      	movmi	r3, #43	; 0x2b
 800430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004312:	f89a 3000 	ldrb.w	r3, [sl]
 8004316:	2b2a      	cmp	r3, #42	; 0x2a
 8004318:	d015      	beq.n	8004346 <_svfiprintf_r+0xf6>
 800431a:	9a07      	ldr	r2, [sp, #28]
 800431c:	4654      	mov	r4, sl
 800431e:	2000      	movs	r0, #0
 8004320:	f04f 0c0a 	mov.w	ip, #10
 8004324:	4621      	mov	r1, r4
 8004326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800432a:	3b30      	subs	r3, #48	; 0x30
 800432c:	2b09      	cmp	r3, #9
 800432e:	d94d      	bls.n	80043cc <_svfiprintf_r+0x17c>
 8004330:	b1b0      	cbz	r0, 8004360 <_svfiprintf_r+0x110>
 8004332:	9207      	str	r2, [sp, #28]
 8004334:	e014      	b.n	8004360 <_svfiprintf_r+0x110>
 8004336:	eba0 0308 	sub.w	r3, r0, r8
 800433a:	fa09 f303 	lsl.w	r3, r9, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	46a2      	mov	sl, r4
 8004344:	e7d2      	b.n	80042ec <_svfiprintf_r+0x9c>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	9103      	str	r1, [sp, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfbb      	ittet	lt
 8004352:	425b      	neglt	r3, r3
 8004354:	f042 0202 	orrlt.w	r2, r2, #2
 8004358:	9307      	strge	r3, [sp, #28]
 800435a:	9307      	strlt	r3, [sp, #28]
 800435c:	bfb8      	it	lt
 800435e:	9204      	strlt	r2, [sp, #16]
 8004360:	7823      	ldrb	r3, [r4, #0]
 8004362:	2b2e      	cmp	r3, #46	; 0x2e
 8004364:	d10c      	bne.n	8004380 <_svfiprintf_r+0x130>
 8004366:	7863      	ldrb	r3, [r4, #1]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d134      	bne.n	80043d6 <_svfiprintf_r+0x186>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	9203      	str	r2, [sp, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfb8      	it	lt
 8004378:	f04f 33ff 	movlt.w	r3, #4294967295
 800437c:	3402      	adds	r4, #2
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004448 <_svfiprintf_r+0x1f8>
 8004384:	7821      	ldrb	r1, [r4, #0]
 8004386:	2203      	movs	r2, #3
 8004388:	4650      	mov	r0, sl
 800438a:	f7fb ff49 	bl	8000220 <memchr>
 800438e:	b138      	cbz	r0, 80043a0 <_svfiprintf_r+0x150>
 8004390:	9b04      	ldr	r3, [sp, #16]
 8004392:	eba0 000a 	sub.w	r0, r0, sl
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	4082      	lsls	r2, r0
 800439a:	4313      	orrs	r3, r2
 800439c:	3401      	adds	r4, #1
 800439e:	9304      	str	r3, [sp, #16]
 80043a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a4:	4825      	ldr	r0, [pc, #148]	; (800443c <_svfiprintf_r+0x1ec>)
 80043a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043aa:	2206      	movs	r2, #6
 80043ac:	f7fb ff38 	bl	8000220 <memchr>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d038      	beq.n	8004426 <_svfiprintf_r+0x1d6>
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <_svfiprintf_r+0x1f0>)
 80043b6:	bb1b      	cbnz	r3, 8004400 <_svfiprintf_r+0x1b0>
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	3307      	adds	r3, #7
 80043bc:	f023 0307 	bic.w	r3, r3, #7
 80043c0:	3308      	adds	r3, #8
 80043c2:	9303      	str	r3, [sp, #12]
 80043c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c6:	4433      	add	r3, r6
 80043c8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ca:	e768      	b.n	800429e <_svfiprintf_r+0x4e>
 80043cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80043d0:	460c      	mov	r4, r1
 80043d2:	2001      	movs	r0, #1
 80043d4:	e7a6      	b.n	8004324 <_svfiprintf_r+0xd4>
 80043d6:	2300      	movs	r3, #0
 80043d8:	3401      	adds	r4, #1
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	4619      	mov	r1, r3
 80043de:	f04f 0c0a 	mov.w	ip, #10
 80043e2:	4620      	mov	r0, r4
 80043e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043e8:	3a30      	subs	r2, #48	; 0x30
 80043ea:	2a09      	cmp	r2, #9
 80043ec:	d903      	bls.n	80043f6 <_svfiprintf_r+0x1a6>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0c6      	beq.n	8004380 <_svfiprintf_r+0x130>
 80043f2:	9105      	str	r1, [sp, #20]
 80043f4:	e7c4      	b.n	8004380 <_svfiprintf_r+0x130>
 80043f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043fa:	4604      	mov	r4, r0
 80043fc:	2301      	movs	r3, #1
 80043fe:	e7f0      	b.n	80043e2 <_svfiprintf_r+0x192>
 8004400:	ab03      	add	r3, sp, #12
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	462a      	mov	r2, r5
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <_svfiprintf_r+0x1f4>)
 8004408:	a904      	add	r1, sp, #16
 800440a:	4638      	mov	r0, r7
 800440c:	f3af 8000 	nop.w
 8004410:	1c42      	adds	r2, r0, #1
 8004412:	4606      	mov	r6, r0
 8004414:	d1d6      	bne.n	80043c4 <_svfiprintf_r+0x174>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	065b      	lsls	r3, r3, #25
 800441a:	f53f af2d 	bmi.w	8004278 <_svfiprintf_r+0x28>
 800441e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004420:	b01d      	add	sp, #116	; 0x74
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	ab03      	add	r3, sp, #12
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	462a      	mov	r2, r5
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <_svfiprintf_r+0x1f4>)
 800442e:	a904      	add	r1, sp, #16
 8004430:	4638      	mov	r0, r7
 8004432:	f000 f9bd 	bl	80047b0 <_printf_i>
 8004436:	e7eb      	b.n	8004410 <_svfiprintf_r+0x1c0>
 8004438:	08004dd4 	.word	0x08004dd4
 800443c:	08004dde 	.word	0x08004dde
 8004440:	00000000 	.word	0x00000000
 8004444:	0800419d 	.word	0x0800419d
 8004448:	08004dda 	.word	0x08004dda

0800444c <__sfputc_r>:
 800444c:	6893      	ldr	r3, [r2, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	b410      	push	{r4}
 8004454:	6093      	str	r3, [r2, #8]
 8004456:	da08      	bge.n	800446a <__sfputc_r+0x1e>
 8004458:	6994      	ldr	r4, [r2, #24]
 800445a:	42a3      	cmp	r3, r4
 800445c:	db01      	blt.n	8004462 <__sfputc_r+0x16>
 800445e:	290a      	cmp	r1, #10
 8004460:	d103      	bne.n	800446a <__sfputc_r+0x1e>
 8004462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004466:	f7ff bc90 	b.w	8003d8a <__swbuf_r>
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	1c58      	adds	r0, r3, #1
 800446e:	6010      	str	r0, [r2, #0]
 8004470:	7019      	strb	r1, [r3, #0]
 8004472:	4608      	mov	r0, r1
 8004474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004478:	4770      	bx	lr

0800447a <__sfputs_r>:
 800447a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	4614      	mov	r4, r2
 8004482:	18d5      	adds	r5, r2, r3
 8004484:	42ac      	cmp	r4, r5
 8004486:	d101      	bne.n	800448c <__sfputs_r+0x12>
 8004488:	2000      	movs	r0, #0
 800448a:	e007      	b.n	800449c <__sfputs_r+0x22>
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	463a      	mov	r2, r7
 8004492:	4630      	mov	r0, r6
 8004494:	f7ff ffda 	bl	800444c <__sfputc_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d1f3      	bne.n	8004484 <__sfputs_r+0xa>
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a0 <_vfiprintf_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	460d      	mov	r5, r1
 80044a6:	b09d      	sub	sp, #116	; 0x74
 80044a8:	4614      	mov	r4, r2
 80044aa:	4698      	mov	r8, r3
 80044ac:	4606      	mov	r6, r0
 80044ae:	b118      	cbz	r0, 80044b8 <_vfiprintf_r+0x18>
 80044b0:	6a03      	ldr	r3, [r0, #32]
 80044b2:	b90b      	cbnz	r3, 80044b8 <_vfiprintf_r+0x18>
 80044b4:	f7ff fb62 	bl	8003b7c <__sinit>
 80044b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ba:	07d9      	lsls	r1, r3, #31
 80044bc:	d405      	bmi.n	80044ca <_vfiprintf_r+0x2a>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	059a      	lsls	r2, r3, #22
 80044c2:	d402      	bmi.n	80044ca <_vfiprintf_r+0x2a>
 80044c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c6:	f7ff fd6e 	bl	8003fa6 <__retarget_lock_acquire_recursive>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	d501      	bpl.n	80044d4 <_vfiprintf_r+0x34>
 80044d0:	692b      	ldr	r3, [r5, #16]
 80044d2:	b99b      	cbnz	r3, 80044fc <_vfiprintf_r+0x5c>
 80044d4:	4629      	mov	r1, r5
 80044d6:	4630      	mov	r0, r6
 80044d8:	f7ff fc94 	bl	8003e04 <__swsetup_r>
 80044dc:	b170      	cbz	r0, 80044fc <_vfiprintf_r+0x5c>
 80044de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044e0:	07dc      	lsls	r4, r3, #31
 80044e2:	d504      	bpl.n	80044ee <_vfiprintf_r+0x4e>
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	b01d      	add	sp, #116	; 0x74
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ee:	89ab      	ldrh	r3, [r5, #12]
 80044f0:	0598      	lsls	r0, r3, #22
 80044f2:	d4f7      	bmi.n	80044e4 <_vfiprintf_r+0x44>
 80044f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044f6:	f7ff fd57 	bl	8003fa8 <__retarget_lock_release_recursive>
 80044fa:	e7f3      	b.n	80044e4 <_vfiprintf_r+0x44>
 80044fc:	2300      	movs	r3, #0
 80044fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004500:	2320      	movs	r3, #32
 8004502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004506:	f8cd 800c 	str.w	r8, [sp, #12]
 800450a:	2330      	movs	r3, #48	; 0x30
 800450c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046c0 <_vfiprintf_r+0x220>
 8004510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004514:	f04f 0901 	mov.w	r9, #1
 8004518:	4623      	mov	r3, r4
 800451a:	469a      	mov	sl, r3
 800451c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004520:	b10a      	cbz	r2, 8004526 <_vfiprintf_r+0x86>
 8004522:	2a25      	cmp	r2, #37	; 0x25
 8004524:	d1f9      	bne.n	800451a <_vfiprintf_r+0x7a>
 8004526:	ebba 0b04 	subs.w	fp, sl, r4
 800452a:	d00b      	beq.n	8004544 <_vfiprintf_r+0xa4>
 800452c:	465b      	mov	r3, fp
 800452e:	4622      	mov	r2, r4
 8004530:	4629      	mov	r1, r5
 8004532:	4630      	mov	r0, r6
 8004534:	f7ff ffa1 	bl	800447a <__sfputs_r>
 8004538:	3001      	adds	r0, #1
 800453a:	f000 80a9 	beq.w	8004690 <_vfiprintf_r+0x1f0>
 800453e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004540:	445a      	add	r2, fp
 8004542:	9209      	str	r2, [sp, #36]	; 0x24
 8004544:	f89a 3000 	ldrb.w	r3, [sl]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a1 	beq.w	8004690 <_vfiprintf_r+0x1f0>
 800454e:	2300      	movs	r3, #0
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004558:	f10a 0a01 	add.w	sl, sl, #1
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004564:	931a      	str	r3, [sp, #104]	; 0x68
 8004566:	4654      	mov	r4, sl
 8004568:	2205      	movs	r2, #5
 800456a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456e:	4854      	ldr	r0, [pc, #336]	; (80046c0 <_vfiprintf_r+0x220>)
 8004570:	f7fb fe56 	bl	8000220 <memchr>
 8004574:	9a04      	ldr	r2, [sp, #16]
 8004576:	b9d8      	cbnz	r0, 80045b0 <_vfiprintf_r+0x110>
 8004578:	06d1      	lsls	r1, r2, #27
 800457a:	bf44      	itt	mi
 800457c:	2320      	movmi	r3, #32
 800457e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004582:	0713      	lsls	r3, r2, #28
 8004584:	bf44      	itt	mi
 8004586:	232b      	movmi	r3, #43	; 0x2b
 8004588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800458c:	f89a 3000 	ldrb.w	r3, [sl]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d015      	beq.n	80045c0 <_vfiprintf_r+0x120>
 8004594:	9a07      	ldr	r2, [sp, #28]
 8004596:	4654      	mov	r4, sl
 8004598:	2000      	movs	r0, #0
 800459a:	f04f 0c0a 	mov.w	ip, #10
 800459e:	4621      	mov	r1, r4
 80045a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a4:	3b30      	subs	r3, #48	; 0x30
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	d94d      	bls.n	8004646 <_vfiprintf_r+0x1a6>
 80045aa:	b1b0      	cbz	r0, 80045da <_vfiprintf_r+0x13a>
 80045ac:	9207      	str	r2, [sp, #28]
 80045ae:	e014      	b.n	80045da <_vfiprintf_r+0x13a>
 80045b0:	eba0 0308 	sub.w	r3, r0, r8
 80045b4:	fa09 f303 	lsl.w	r3, r9, r3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	46a2      	mov	sl, r4
 80045be:	e7d2      	b.n	8004566 <_vfiprintf_r+0xc6>
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	1d19      	adds	r1, r3, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	9103      	str	r1, [sp, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bfbb      	ittet	lt
 80045cc:	425b      	neglt	r3, r3
 80045ce:	f042 0202 	orrlt.w	r2, r2, #2
 80045d2:	9307      	strge	r3, [sp, #28]
 80045d4:	9307      	strlt	r3, [sp, #28]
 80045d6:	bfb8      	it	lt
 80045d8:	9204      	strlt	r2, [sp, #16]
 80045da:	7823      	ldrb	r3, [r4, #0]
 80045dc:	2b2e      	cmp	r3, #46	; 0x2e
 80045de:	d10c      	bne.n	80045fa <_vfiprintf_r+0x15a>
 80045e0:	7863      	ldrb	r3, [r4, #1]
 80045e2:	2b2a      	cmp	r3, #42	; 0x2a
 80045e4:	d134      	bne.n	8004650 <_vfiprintf_r+0x1b0>
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	9203      	str	r2, [sp, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f6:	3402      	adds	r4, #2
 80045f8:	9305      	str	r3, [sp, #20]
 80045fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046d0 <_vfiprintf_r+0x230>
 80045fe:	7821      	ldrb	r1, [r4, #0]
 8004600:	2203      	movs	r2, #3
 8004602:	4650      	mov	r0, sl
 8004604:	f7fb fe0c 	bl	8000220 <memchr>
 8004608:	b138      	cbz	r0, 800461a <_vfiprintf_r+0x17a>
 800460a:	9b04      	ldr	r3, [sp, #16]
 800460c:	eba0 000a 	sub.w	r0, r0, sl
 8004610:	2240      	movs	r2, #64	; 0x40
 8004612:	4082      	lsls	r2, r0
 8004614:	4313      	orrs	r3, r2
 8004616:	3401      	adds	r4, #1
 8004618:	9304      	str	r3, [sp, #16]
 800461a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461e:	4829      	ldr	r0, [pc, #164]	; (80046c4 <_vfiprintf_r+0x224>)
 8004620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004624:	2206      	movs	r2, #6
 8004626:	f7fb fdfb 	bl	8000220 <memchr>
 800462a:	2800      	cmp	r0, #0
 800462c:	d03f      	beq.n	80046ae <_vfiprintf_r+0x20e>
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <_vfiprintf_r+0x228>)
 8004630:	bb1b      	cbnz	r3, 800467a <_vfiprintf_r+0x1da>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	3307      	adds	r3, #7
 8004636:	f023 0307 	bic.w	r3, r3, #7
 800463a:	3308      	adds	r3, #8
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004640:	443b      	add	r3, r7
 8004642:	9309      	str	r3, [sp, #36]	; 0x24
 8004644:	e768      	b.n	8004518 <_vfiprintf_r+0x78>
 8004646:	fb0c 3202 	mla	r2, ip, r2, r3
 800464a:	460c      	mov	r4, r1
 800464c:	2001      	movs	r0, #1
 800464e:	e7a6      	b.n	800459e <_vfiprintf_r+0xfe>
 8004650:	2300      	movs	r3, #0
 8004652:	3401      	adds	r4, #1
 8004654:	9305      	str	r3, [sp, #20]
 8004656:	4619      	mov	r1, r3
 8004658:	f04f 0c0a 	mov.w	ip, #10
 800465c:	4620      	mov	r0, r4
 800465e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004662:	3a30      	subs	r2, #48	; 0x30
 8004664:	2a09      	cmp	r2, #9
 8004666:	d903      	bls.n	8004670 <_vfiprintf_r+0x1d0>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0c6      	beq.n	80045fa <_vfiprintf_r+0x15a>
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	e7c4      	b.n	80045fa <_vfiprintf_r+0x15a>
 8004670:	fb0c 2101 	mla	r1, ip, r1, r2
 8004674:	4604      	mov	r4, r0
 8004676:	2301      	movs	r3, #1
 8004678:	e7f0      	b.n	800465c <_vfiprintf_r+0x1bc>
 800467a:	ab03      	add	r3, sp, #12
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	462a      	mov	r2, r5
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <_vfiprintf_r+0x22c>)
 8004682:	a904      	add	r1, sp, #16
 8004684:	4630      	mov	r0, r6
 8004686:	f3af 8000 	nop.w
 800468a:	4607      	mov	r7, r0
 800468c:	1c78      	adds	r0, r7, #1
 800468e:	d1d6      	bne.n	800463e <_vfiprintf_r+0x19e>
 8004690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004692:	07d9      	lsls	r1, r3, #31
 8004694:	d405      	bmi.n	80046a2 <_vfiprintf_r+0x202>
 8004696:	89ab      	ldrh	r3, [r5, #12]
 8004698:	059a      	lsls	r2, r3, #22
 800469a:	d402      	bmi.n	80046a2 <_vfiprintf_r+0x202>
 800469c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469e:	f7ff fc83 	bl	8003fa8 <__retarget_lock_release_recursive>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	065b      	lsls	r3, r3, #25
 80046a6:	f53f af1d 	bmi.w	80044e4 <_vfiprintf_r+0x44>
 80046aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ac:	e71c      	b.n	80044e8 <_vfiprintf_r+0x48>
 80046ae:	ab03      	add	r3, sp, #12
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462a      	mov	r2, r5
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <_vfiprintf_r+0x22c>)
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f879 	bl	80047b0 <_printf_i>
 80046be:	e7e4      	b.n	800468a <_vfiprintf_r+0x1ea>
 80046c0:	08004dd4 	.word	0x08004dd4
 80046c4:	08004dde 	.word	0x08004dde
 80046c8:	00000000 	.word	0x00000000
 80046cc:	0800447b 	.word	0x0800447b
 80046d0:	08004dda 	.word	0x08004dda

080046d4 <_printf_common>:
 80046d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	4616      	mov	r6, r2
 80046da:	4699      	mov	r9, r3
 80046dc:	688a      	ldr	r2, [r1, #8]
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bfb8      	it	lt
 80046e8:	4613      	movlt	r3, r2
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046f0:	4607      	mov	r7, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b10a      	cbz	r2, 80046fa <_printf_common+0x26>
 80046f6:	3301      	adds	r3, #1
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	0699      	lsls	r1, r3, #26
 80046fe:	bf42      	ittt	mi
 8004700:	6833      	ldrmi	r3, [r6, #0]
 8004702:	3302      	addmi	r3, #2
 8004704:	6033      	strmi	r3, [r6, #0]
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	f015 0506 	ands.w	r5, r5, #6
 800470c:	d106      	bne.n	800471c <_printf_common+0x48>
 800470e:	f104 0a19 	add.w	sl, r4, #25
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	6832      	ldr	r2, [r6, #0]
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	42ab      	cmp	r3, r5
 800471a:	dc26      	bgt.n	800476a <_printf_common+0x96>
 800471c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004720:	1e13      	subs	r3, r2, #0
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	bf18      	it	ne
 8004726:	2301      	movne	r3, #1
 8004728:	0692      	lsls	r2, r2, #26
 800472a:	d42b      	bmi.n	8004784 <_printf_common+0xb0>
 800472c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004730:	4649      	mov	r1, r9
 8004732:	4638      	mov	r0, r7
 8004734:	47c0      	blx	r8
 8004736:	3001      	adds	r0, #1
 8004738:	d01e      	beq.n	8004778 <_printf_common+0xa4>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	6922      	ldr	r2, [r4, #16]
 800473e:	f003 0306 	and.w	r3, r3, #6
 8004742:	2b04      	cmp	r3, #4
 8004744:	bf02      	ittt	eq
 8004746:	68e5      	ldreq	r5, [r4, #12]
 8004748:	6833      	ldreq	r3, [r6, #0]
 800474a:	1aed      	subeq	r5, r5, r3
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	bf0c      	ite	eq
 8004750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004754:	2500      	movne	r5, #0
 8004756:	4293      	cmp	r3, r2
 8004758:	bfc4      	itt	gt
 800475a:	1a9b      	subgt	r3, r3, r2
 800475c:	18ed      	addgt	r5, r5, r3
 800475e:	2600      	movs	r6, #0
 8004760:	341a      	adds	r4, #26
 8004762:	42b5      	cmp	r5, r6
 8004764:	d11a      	bne.n	800479c <_printf_common+0xc8>
 8004766:	2000      	movs	r0, #0
 8004768:	e008      	b.n	800477c <_printf_common+0xa8>
 800476a:	2301      	movs	r3, #1
 800476c:	4652      	mov	r2, sl
 800476e:	4649      	mov	r1, r9
 8004770:	4638      	mov	r0, r7
 8004772:	47c0      	blx	r8
 8004774:	3001      	adds	r0, #1
 8004776:	d103      	bne.n	8004780 <_printf_common+0xac>
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004780:	3501      	adds	r5, #1
 8004782:	e7c6      	b.n	8004712 <_printf_common+0x3e>
 8004784:	18e1      	adds	r1, r4, r3
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	2030      	movs	r0, #48	; 0x30
 800478a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800478e:	4422      	add	r2, r4
 8004790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004798:	3302      	adds	r3, #2
 800479a:	e7c7      	b.n	800472c <_printf_common+0x58>
 800479c:	2301      	movs	r3, #1
 800479e:	4622      	mov	r2, r4
 80047a0:	4649      	mov	r1, r9
 80047a2:	4638      	mov	r0, r7
 80047a4:	47c0      	blx	r8
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0e6      	beq.n	8004778 <_printf_common+0xa4>
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7d9      	b.n	8004762 <_printf_common+0x8e>
	...

080047b0 <_printf_i>:
 80047b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	7e0f      	ldrb	r7, [r1, #24]
 80047b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b8:	2f78      	cmp	r7, #120	; 0x78
 80047ba:	4691      	mov	r9, r2
 80047bc:	4680      	mov	r8, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	469a      	mov	sl, r3
 80047c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047c6:	d807      	bhi.n	80047d8 <_printf_i+0x28>
 80047c8:	2f62      	cmp	r7, #98	; 0x62
 80047ca:	d80a      	bhi.n	80047e2 <_printf_i+0x32>
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	f000 80d4 	beq.w	800497a <_printf_i+0x1ca>
 80047d2:	2f58      	cmp	r7, #88	; 0x58
 80047d4:	f000 80c0 	beq.w	8004958 <_printf_i+0x1a8>
 80047d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047e0:	e03a      	b.n	8004858 <_printf_i+0xa8>
 80047e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047e6:	2b15      	cmp	r3, #21
 80047e8:	d8f6      	bhi.n	80047d8 <_printf_i+0x28>
 80047ea:	a101      	add	r1, pc, #4	; (adr r1, 80047f0 <_printf_i+0x40>)
 80047ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f0:	08004849 	.word	0x08004849
 80047f4:	0800485d 	.word	0x0800485d
 80047f8:	080047d9 	.word	0x080047d9
 80047fc:	080047d9 	.word	0x080047d9
 8004800:	080047d9 	.word	0x080047d9
 8004804:	080047d9 	.word	0x080047d9
 8004808:	0800485d 	.word	0x0800485d
 800480c:	080047d9 	.word	0x080047d9
 8004810:	080047d9 	.word	0x080047d9
 8004814:	080047d9 	.word	0x080047d9
 8004818:	080047d9 	.word	0x080047d9
 800481c:	08004961 	.word	0x08004961
 8004820:	08004889 	.word	0x08004889
 8004824:	0800491b 	.word	0x0800491b
 8004828:	080047d9 	.word	0x080047d9
 800482c:	080047d9 	.word	0x080047d9
 8004830:	08004983 	.word	0x08004983
 8004834:	080047d9 	.word	0x080047d9
 8004838:	08004889 	.word	0x08004889
 800483c:	080047d9 	.word	0x080047d9
 8004840:	080047d9 	.word	0x080047d9
 8004844:	08004923 	.word	0x08004923
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	602a      	str	r2, [r5, #0]
 8004850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004858:	2301      	movs	r3, #1
 800485a:	e09f      	b.n	800499c <_printf_i+0x1ec>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	0607      	lsls	r7, r0, #24
 8004862:	f103 0104 	add.w	r1, r3, #4
 8004866:	6029      	str	r1, [r5, #0]
 8004868:	d501      	bpl.n	800486e <_printf_i+0xbe>
 800486a:	681e      	ldr	r6, [r3, #0]
 800486c:	e003      	b.n	8004876 <_printf_i+0xc6>
 800486e:	0646      	lsls	r6, r0, #25
 8004870:	d5fb      	bpl.n	800486a <_printf_i+0xba>
 8004872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004876:	2e00      	cmp	r6, #0
 8004878:	da03      	bge.n	8004882 <_printf_i+0xd2>
 800487a:	232d      	movs	r3, #45	; 0x2d
 800487c:	4276      	negs	r6, r6
 800487e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004882:	485a      	ldr	r0, [pc, #360]	; (80049ec <_printf_i+0x23c>)
 8004884:	230a      	movs	r3, #10
 8004886:	e012      	b.n	80048ae <_printf_i+0xfe>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	6029      	str	r1, [r5, #0]
 8004890:	0605      	lsls	r5, r0, #24
 8004892:	d501      	bpl.n	8004898 <_printf_i+0xe8>
 8004894:	681e      	ldr	r6, [r3, #0]
 8004896:	e002      	b.n	800489e <_printf_i+0xee>
 8004898:	0641      	lsls	r1, r0, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0xe4>
 800489c:	881e      	ldrh	r6, [r3, #0]
 800489e:	4853      	ldr	r0, [pc, #332]	; (80049ec <_printf_i+0x23c>)
 80048a0:	2f6f      	cmp	r7, #111	; 0x6f
 80048a2:	bf0c      	ite	eq
 80048a4:	2308      	moveq	r3, #8
 80048a6:	230a      	movne	r3, #10
 80048a8:	2100      	movs	r1, #0
 80048aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ae:	6865      	ldr	r5, [r4, #4]
 80048b0:	60a5      	str	r5, [r4, #8]
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	bfa2      	ittt	ge
 80048b6:	6821      	ldrge	r1, [r4, #0]
 80048b8:	f021 0104 	bicge.w	r1, r1, #4
 80048bc:	6021      	strge	r1, [r4, #0]
 80048be:	b90e      	cbnz	r6, 80048c4 <_printf_i+0x114>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	d04b      	beq.n	800495c <_printf_i+0x1ac>
 80048c4:	4615      	mov	r5, r2
 80048c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ca:	fb03 6711 	mls	r7, r3, r1, r6
 80048ce:	5dc7      	ldrb	r7, [r0, r7]
 80048d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048d4:	4637      	mov	r7, r6
 80048d6:	42bb      	cmp	r3, r7
 80048d8:	460e      	mov	r6, r1
 80048da:	d9f4      	bls.n	80048c6 <_printf_i+0x116>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d10b      	bne.n	80048f8 <_printf_i+0x148>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	07de      	lsls	r6, r3, #31
 80048e4:	d508      	bpl.n	80048f8 <_printf_i+0x148>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	4299      	cmp	r1, r3
 80048ec:	bfde      	ittt	le
 80048ee:	2330      	movle	r3, #48	; 0x30
 80048f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f8:	1b52      	subs	r2, r2, r5
 80048fa:	6122      	str	r2, [r4, #16]
 80048fc:	f8cd a000 	str.w	sl, [sp]
 8004900:	464b      	mov	r3, r9
 8004902:	aa03      	add	r2, sp, #12
 8004904:	4621      	mov	r1, r4
 8004906:	4640      	mov	r0, r8
 8004908:	f7ff fee4 	bl	80046d4 <_printf_common>
 800490c:	3001      	adds	r0, #1
 800490e:	d14a      	bne.n	80049a6 <_printf_i+0x1f6>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b004      	add	sp, #16
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	f043 0320 	orr.w	r3, r3, #32
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	4833      	ldr	r0, [pc, #204]	; (80049f0 <_printf_i+0x240>)
 8004924:	2778      	movs	r7, #120	; 0x78
 8004926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	6829      	ldr	r1, [r5, #0]
 800492e:	061f      	lsls	r7, r3, #24
 8004930:	f851 6b04 	ldr.w	r6, [r1], #4
 8004934:	d402      	bmi.n	800493c <_printf_i+0x18c>
 8004936:	065f      	lsls	r7, r3, #25
 8004938:	bf48      	it	mi
 800493a:	b2b6      	uxthmi	r6, r6
 800493c:	07df      	lsls	r7, r3, #31
 800493e:	bf48      	it	mi
 8004940:	f043 0320 	orrmi.w	r3, r3, #32
 8004944:	6029      	str	r1, [r5, #0]
 8004946:	bf48      	it	mi
 8004948:	6023      	strmi	r3, [r4, #0]
 800494a:	b91e      	cbnz	r6, 8004954 <_printf_i+0x1a4>
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	f023 0320 	bic.w	r3, r3, #32
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	2310      	movs	r3, #16
 8004956:	e7a7      	b.n	80048a8 <_printf_i+0xf8>
 8004958:	4824      	ldr	r0, [pc, #144]	; (80049ec <_printf_i+0x23c>)
 800495a:	e7e4      	b.n	8004926 <_printf_i+0x176>
 800495c:	4615      	mov	r5, r2
 800495e:	e7bd      	b.n	80048dc <_printf_i+0x12c>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6826      	ldr	r6, [r4, #0]
 8004964:	6961      	ldr	r1, [r4, #20]
 8004966:	1d18      	adds	r0, r3, #4
 8004968:	6028      	str	r0, [r5, #0]
 800496a:	0635      	lsls	r5, r6, #24
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	d501      	bpl.n	8004974 <_printf_i+0x1c4>
 8004970:	6019      	str	r1, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0x1ca>
 8004974:	0670      	lsls	r0, r6, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0x1c0>
 8004978:	8019      	strh	r1, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	4615      	mov	r5, r2
 8004980:	e7bc      	b.n	80048fc <_printf_i+0x14c>
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	1d1a      	adds	r2, r3, #4
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	681d      	ldr	r5, [r3, #0]
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	2100      	movs	r1, #0
 800498e:	4628      	mov	r0, r5
 8004990:	f7fb fc46 	bl	8000220 <memchr>
 8004994:	b108      	cbz	r0, 800499a <_printf_i+0x1ea>
 8004996:	1b40      	subs	r0, r0, r5
 8004998:	6060      	str	r0, [r4, #4]
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	2300      	movs	r3, #0
 80049a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a4:	e7aa      	b.n	80048fc <_printf_i+0x14c>
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	462a      	mov	r2, r5
 80049aa:	4649      	mov	r1, r9
 80049ac:	4640      	mov	r0, r8
 80049ae:	47d0      	blx	sl
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0ad      	beq.n	8004910 <_printf_i+0x160>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	079b      	lsls	r3, r3, #30
 80049b8:	d413      	bmi.n	80049e2 <_printf_i+0x232>
 80049ba:	68e0      	ldr	r0, [r4, #12]
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	4298      	cmp	r0, r3
 80049c0:	bfb8      	it	lt
 80049c2:	4618      	movlt	r0, r3
 80049c4:	e7a6      	b.n	8004914 <_printf_i+0x164>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4632      	mov	r2, r6
 80049ca:	4649      	mov	r1, r9
 80049cc:	4640      	mov	r0, r8
 80049ce:	47d0      	blx	sl
 80049d0:	3001      	adds	r0, #1
 80049d2:	d09d      	beq.n	8004910 <_printf_i+0x160>
 80049d4:	3501      	adds	r5, #1
 80049d6:	68e3      	ldr	r3, [r4, #12]
 80049d8:	9903      	ldr	r1, [sp, #12]
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	42ab      	cmp	r3, r5
 80049de:	dcf2      	bgt.n	80049c6 <_printf_i+0x216>
 80049e0:	e7eb      	b.n	80049ba <_printf_i+0x20a>
 80049e2:	2500      	movs	r5, #0
 80049e4:	f104 0619 	add.w	r6, r4, #25
 80049e8:	e7f5      	b.n	80049d6 <_printf_i+0x226>
 80049ea:	bf00      	nop
 80049ec:	08004de5 	.word	0x08004de5
 80049f0:	08004df6 	.word	0x08004df6

080049f4 <__sflush_r>:
 80049f4:	898a      	ldrh	r2, [r1, #12]
 80049f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fa:	4605      	mov	r5, r0
 80049fc:	0710      	lsls	r0, r2, #28
 80049fe:	460c      	mov	r4, r1
 8004a00:	d458      	bmi.n	8004ab4 <__sflush_r+0xc0>
 8004a02:	684b      	ldr	r3, [r1, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dc05      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dc02      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d0f9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a20:	682f      	ldr	r7, [r5, #0]
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	d032      	beq.n	8004a8e <__sflush_r+0x9a>
 8004a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	075a      	lsls	r2, r3, #29
 8004a2e:	d505      	bpl.n	8004a3c <__sflush_r+0x48>
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	1ac0      	subs	r0, r0, r3
 8004a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a36:	b10b      	cbz	r3, 8004a3c <__sflush_r+0x48>
 8004a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a3a:	1ac0      	subs	r0, r0, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b0      	blx	r6
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	d106      	bne.n	8004a5c <__sflush_r+0x68>
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	291d      	cmp	r1, #29
 8004a52:	d82b      	bhi.n	8004aac <__sflush_r+0xb8>
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <__sflush_r+0x108>)
 8004a56:	410a      	asrs	r2, r1
 8004a58:	07d6      	lsls	r6, r2, #31
 8004a5a:	d427      	bmi.n	8004aac <__sflush_r+0xb8>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	6062      	str	r2, [r4, #4]
 8004a60:	04d9      	lsls	r1, r3, #19
 8004a62:	6922      	ldr	r2, [r4, #16]
 8004a64:	6022      	str	r2, [r4, #0]
 8004a66:	d504      	bpl.n	8004a72 <__sflush_r+0x7e>
 8004a68:	1c42      	adds	r2, r0, #1
 8004a6a:	d101      	bne.n	8004a70 <__sflush_r+0x7c>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b903      	cbnz	r3, 8004a72 <__sflush_r+0x7e>
 8004a70:	6560      	str	r0, [r4, #84]	; 0x54
 8004a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a74:	602f      	str	r7, [r5, #0]
 8004a76:	2900      	cmp	r1, #0
 8004a78:	d0c9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d002      	beq.n	8004a88 <__sflush_r+0x94>
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7ff fa92 	bl	8003fac <_free_r>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a8c:	e7c0      	b.n	8004a10 <__sflush_r+0x1c>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b0      	blx	r6
 8004a94:	1c41      	adds	r1, r0, #1
 8004a96:	d1c8      	bne.n	8004a2a <__sflush_r+0x36>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c5      	beq.n	8004a2a <__sflush_r+0x36>
 8004a9e:	2b1d      	cmp	r3, #29
 8004aa0:	d001      	beq.n	8004aa6 <__sflush_r+0xb2>
 8004aa2:	2b16      	cmp	r3, #22
 8004aa4:	d101      	bne.n	8004aaa <__sflush_r+0xb6>
 8004aa6:	602f      	str	r7, [r5, #0]
 8004aa8:	e7b1      	b.n	8004a0e <__sflush_r+0x1a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	e7ad      	b.n	8004a10 <__sflush_r+0x1c>
 8004ab4:	690f      	ldr	r7, [r1, #16]
 8004ab6:	2f00      	cmp	r7, #0
 8004ab8:	d0a9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004aba:	0793      	lsls	r3, r2, #30
 8004abc:	680e      	ldr	r6, [r1, #0]
 8004abe:	bf08      	it	eq
 8004ac0:	694b      	ldreq	r3, [r1, #20]
 8004ac2:	600f      	str	r7, [r1, #0]
 8004ac4:	bf18      	it	ne
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	eba6 0807 	sub.w	r8, r6, r7
 8004acc:	608b      	str	r3, [r1, #8]
 8004ace:	f1b8 0f00 	cmp.w	r8, #0
 8004ad2:	dd9c      	ble.n	8004a0e <__sflush_r+0x1a>
 8004ad4:	6a21      	ldr	r1, [r4, #32]
 8004ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad8:	4643      	mov	r3, r8
 8004ada:	463a      	mov	r2, r7
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b0      	blx	r6
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dc06      	bgt.n	8004af2 <__sflush_r+0xfe>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e78e      	b.n	8004a10 <__sflush_r+0x1c>
 8004af2:	4407      	add	r7, r0
 8004af4:	eba8 0800 	sub.w	r8, r8, r0
 8004af8:	e7e9      	b.n	8004ace <__sflush_r+0xda>
 8004afa:	bf00      	nop
 8004afc:	dfbffffe 	.word	0xdfbffffe

08004b00 <_fflush_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	4605      	mov	r5, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	b913      	cbnz	r3, 8004b10 <_fflush_r+0x10>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	b118      	cbz	r0, 8004b1a <_fflush_r+0x1a>
 8004b12:	6a03      	ldr	r3, [r0, #32]
 8004b14:	b90b      	cbnz	r3, 8004b1a <_fflush_r+0x1a>
 8004b16:	f7ff f831 	bl	8003b7c <__sinit>
 8004b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f3      	beq.n	8004b0a <_fflush_r+0xa>
 8004b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b24:	07d0      	lsls	r0, r2, #31
 8004b26:	d404      	bmi.n	8004b32 <_fflush_r+0x32>
 8004b28:	0599      	lsls	r1, r3, #22
 8004b2a:	d402      	bmi.n	8004b32 <_fflush_r+0x32>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f7ff fa3a 	bl	8003fa6 <__retarget_lock_acquire_recursive>
 8004b32:	4628      	mov	r0, r5
 8004b34:	4621      	mov	r1, r4
 8004b36:	f7ff ff5d 	bl	80049f4 <__sflush_r>
 8004b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b3c:	07da      	lsls	r2, r3, #31
 8004b3e:	4605      	mov	r5, r0
 8004b40:	d4e4      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	059b      	lsls	r3, r3, #22
 8004b46:	d4e1      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f7ff fa2d 	bl	8003fa8 <__retarget_lock_release_recursive>
 8004b4e:	e7dd      	b.n	8004b0c <_fflush_r+0xc>

08004b50 <__swhatbuf_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	460c      	mov	r4, r1
 8004b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	b096      	sub	sp, #88	; 0x58
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	461e      	mov	r6, r3
 8004b60:	da0d      	bge.n	8004b7e <__swhatbuf_r+0x2e>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b72:	2340      	movne	r3, #64	; 0x40
 8004b74:	2000      	movs	r0, #0
 8004b76:	6031      	str	r1, [r6, #0]
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	b016      	add	sp, #88	; 0x58
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f000 f862 	bl	8004c48 <_fstat_r>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	dbec      	blt.n	8004b62 <__swhatbuf_r+0x12>
 8004b88:	9901      	ldr	r1, [sp, #4]
 8004b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b92:	4259      	negs	r1, r3
 8004b94:	4159      	adcs	r1, r3
 8004b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9a:	e7eb      	b.n	8004b74 <__swhatbuf_r+0x24>

08004b9c <__smakebuf_r>:
 8004b9c:	898b      	ldrh	r3, [r1, #12]
 8004b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ba0:	079d      	lsls	r5, r3, #30
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	d507      	bpl.n	8004bb8 <__smakebuf_r+0x1c>
 8004ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	6163      	str	r3, [r4, #20]
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	ab01      	add	r3, sp, #4
 8004bba:	466a      	mov	r2, sp
 8004bbc:	f7ff ffc8 	bl	8004b50 <__swhatbuf_r>
 8004bc0:	9900      	ldr	r1, [sp, #0]
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7ff fa5d 	bl	8004084 <_malloc_r>
 8004bca:	b948      	cbnz	r0, 8004be0 <__smakebuf_r+0x44>
 8004bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd0:	059a      	lsls	r2, r3, #22
 8004bd2:	d4ef      	bmi.n	8004bb4 <__smakebuf_r+0x18>
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	e7e3      	b.n	8004ba8 <__smakebuf_r+0xc>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	6020      	str	r0, [r4, #0]
 8004be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	9b00      	ldr	r3, [sp, #0]
 8004bec:	6163      	str	r3, [r4, #20]
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	6120      	str	r0, [r4, #16]
 8004bf2:	b15b      	cbz	r3, 8004c0c <__smakebuf_r+0x70>
 8004bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f837 	bl	8004c6c <_isatty_r>
 8004bfe:	b128      	cbz	r0, 8004c0c <__smakebuf_r+0x70>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	431d      	orrs	r5, r3
 8004c10:	81a5      	strh	r5, [r4, #12]
 8004c12:	e7cf      	b.n	8004bb4 <__smakebuf_r+0x18>

08004c14 <memmove>:
 8004c14:	4288      	cmp	r0, r1
 8004c16:	b510      	push	{r4, lr}
 8004c18:	eb01 0402 	add.w	r4, r1, r2
 8004c1c:	d902      	bls.n	8004c24 <memmove+0x10>
 8004c1e:	4284      	cmp	r4, r0
 8004c20:	4623      	mov	r3, r4
 8004c22:	d807      	bhi.n	8004c34 <memmove+0x20>
 8004c24:	1e43      	subs	r3, r0, #1
 8004c26:	42a1      	cmp	r1, r4
 8004c28:	d008      	beq.n	8004c3c <memmove+0x28>
 8004c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c32:	e7f8      	b.n	8004c26 <memmove+0x12>
 8004c34:	4402      	add	r2, r0
 8004c36:	4601      	mov	r1, r0
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	d100      	bne.n	8004c3e <memmove+0x2a>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c46:	e7f7      	b.n	8004c38 <memmove+0x24>

08004c48 <_fstat_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_fstat_r+0x20>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	f7fc f860 	bl	8000d1a <_fstat>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_fstat_r+0x1c>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_fstat_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	20000280 	.word	0x20000280

08004c6c <_isatty_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d06      	ldr	r5, [pc, #24]	; (8004c88 <_isatty_r+0x1c>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	602b      	str	r3, [r5, #0]
 8004c78:	f7fc f85f 	bl	8000d3a <_isatty>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_isatty_r+0x1a>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_isatty_r+0x1a>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	20000280 	.word	0x20000280

08004c8c <_sbrk_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d06      	ldr	r5, [pc, #24]	; (8004ca8 <_sbrk_r+0x1c>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7fc f868 	bl	8000d6c <_sbrk>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk_r+0x1a>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_sbrk_r+0x1a>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000280 	.word	0x20000280

08004cac <memcpy>:
 8004cac:	440a      	add	r2, r1
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb4:	d100      	bne.n	8004cb8 <memcpy+0xc>
 8004cb6:	4770      	bx	lr
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	d1f9      	bne.n	8004cba <memcpy+0xe>
 8004cc6:	bd10      	pop	{r4, pc}

08004cc8 <_realloc_r>:
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	4680      	mov	r8, r0
 8004cce:	4614      	mov	r4, r2
 8004cd0:	460e      	mov	r6, r1
 8004cd2:	b921      	cbnz	r1, 8004cde <_realloc_r+0x16>
 8004cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	4611      	mov	r1, r2
 8004cda:	f7ff b9d3 	b.w	8004084 <_malloc_r>
 8004cde:	b92a      	cbnz	r2, 8004cec <_realloc_r+0x24>
 8004ce0:	f7ff f964 	bl	8003fac <_free_r>
 8004ce4:	4625      	mov	r5, r4
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cec:	f000 f81b 	bl	8004d26 <_malloc_usable_size_r>
 8004cf0:	4284      	cmp	r4, r0
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	d802      	bhi.n	8004cfc <_realloc_r+0x34>
 8004cf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cfa:	d812      	bhi.n	8004d22 <_realloc_r+0x5a>
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f7ff f9c0 	bl	8004084 <_malloc_r>
 8004d04:	4605      	mov	r5, r0
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d0ed      	beq.n	8004ce6 <_realloc_r+0x1e>
 8004d0a:	42bc      	cmp	r4, r7
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4631      	mov	r1, r6
 8004d10:	bf28      	it	cs
 8004d12:	463a      	movcs	r2, r7
 8004d14:	f7ff ffca 	bl	8004cac <memcpy>
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f7ff f946 	bl	8003fac <_free_r>
 8004d20:	e7e1      	b.n	8004ce6 <_realloc_r+0x1e>
 8004d22:	4635      	mov	r5, r6
 8004d24:	e7df      	b.n	8004ce6 <_realloc_r+0x1e>

08004d26 <_malloc_usable_size_r>:
 8004d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2a:	1f18      	subs	r0, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bfbc      	itt	lt
 8004d30:	580b      	ldrlt	r3, [r1, r0]
 8004d32:	18c0      	addlt	r0, r0, r3
 8004d34:	4770      	bx	lr
	...

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
